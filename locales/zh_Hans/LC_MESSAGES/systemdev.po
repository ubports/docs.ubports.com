# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, The UBports project (Creative Commons BY-SA 4.0)
# This file is distributed under the same license as the UBports package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: UBports\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-01-05 00:57+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"
"Language: zh_Hans\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../systemdev/calendars.rst:2
msgid "Working on the Calendar feature"
msgstr ""

#: ../../systemdev/calendars.rst:4
msgid "The Calendar feature is provided by several components:"
msgstr ""

#: ../../systemdev/calendars.rst:6
msgid ""
"The `Calendar App <https://gitlab.com/ubports/apps/calendar-app>`_, "
"providing the user interface"
msgstr ""

#: ../../systemdev/calendars.rst:7
msgid ""
"`Evolution Data Server <https://github.com/ubports/evolution-data-server-"
"packaging>`_ (often shortened as \"EDS\"), which is the backend where your "
"calendars are stored"
msgstr ""

#: ../../systemdev/calendars.rst:8
msgid ""
"`sync-monitor <https://github.com/ubports/sync-monitor>`_, the service "
"responsible for managing the synchronisation with remote calendars"
msgstr ""

#: ../../systemdev/calendars.rst:9
msgid ""
"`SyncEvolution <https://github.com/ubports/syncevolution-packaging>`_, the "
"service responsible for performing the synchronisation to a WebDAV/CalDAV "
"remote calendar"
msgstr ""

#: ../../systemdev/calendars.rst:13 ../../systemdev/online-accounts.rst:30
msgid "Debugging"
msgstr ""

#: ../../systemdev/calendars.rst:15
msgid ""
"The most convenient way to run commands on the device and collect logs is by "
"opening a remote shell. This can be done by using :doc:`/userguide/"
"advanceduse/adb` or :doc:`/userguide/advanceduse/ssh`. In the following "
"sections, it's assumed that you've got access to a terminal console to the "
"device."
msgstr ""

#: ../../systemdev/calendars.rst:19
msgid "Scheduling and account issues"
msgstr ""

#: ../../systemdev/calendars.rst:21
msgid ""
"If you are not sure whether the calendar is being synchronised, or whether "
"the operation is successful, ``sync-monitor`` is the component that needs to "
"be examined. This service should always be running in the background, and "
"its logs can be found in ``~/.cache/upstart/sync-monitor.log``. In order to "
"see them printed in real-time as you operate on the device, you can run this "
"command:"
msgstr ""

#: ../../systemdev/calendars.rst:27
msgid ""
"These logs should be enough to give you an idea on whether your calendar "
"accounts are recognised, and whether a synchronisation is scheduled, "
"happening, and completing successfully."
msgstr ""

#: ../../systemdev/calendars.rst:31
msgid "Calendar data synchronisation issues"
msgstr ""

#: ../../systemdev/calendars.rst:33
msgid ""
"Follow these steps one you are confident that a synchronisation of your "
"account is at least attempted, and want to investigate a synchronisation "
"failure or issues with missing or duplicate items. On the device, it's "
"possible to run ``syncevolution`` in debug mode. To do so, kill any existing "
"processes:"
msgstr ""

#: ../../systemdev/calendars.rst:39
msgid ""
"Then, start the ``syncevolution`` process with the proper environment "
"variable:"
msgstr ""

#: ../../systemdev/calendars.rst:45
msgid ""
"At this point, open the Calendar App (if it was not open already) and "
"manually trigger a synchronisation (note that the Synchronisation action is "
"only available if your device is connected to the internet): all the logs "
"will appear in the terminal."
msgstr ""

#: ../../systemdev/calendars.rst:47
msgid ""
"In some cases, the output from ``syncevolution`` might not be enough: for "
"example, the raw HTTP data is usually not printed. Should you need to see "
"that as well, then you'll have to modify a configuration file as well. "
"``syncevolution``'s configuration files are located under ``~/.config/"
"syncevolution/``,  in a subdirectory whose name takes the form ``<provider-"
"name>-<account-id>``.  There might be stale directories as well, referring "
"to old accounts which have been since deleted. To find out what accounts are "
"still valid, you can invoke the ``account-console`` tool like this:"
msgstr ""

#: ../../systemdev/calendars.rst:53
msgid ""
"This will print the list of the current valid accounts. Once you've figured "
"out what is the account you are interested in, open the file ``~/.config/"
"syncevolution/<account>/peers/target-config/config.ini`` and set the "
"``loglevel`` variable to a higher value (``11`` seems enough to print all "
"the HTTP traffic):"
msgstr ""

#: ../../systemdev/calendars.rst:65
msgid ""
"Note that in order for these changes to take effect, you'll need to restart "
"the ``syncevolution`` process again, as explained above."
msgstr ""

#: ../../systemdev/guides.rst:2
msgid "System Software guides"
msgstr ""

#: ../../systemdev/guides.rst:4
msgid ""
"These guides will give you general instructions on building and testing your "
"own changes to Ubuntu Touch system software. They are not not an exhaustive "
"reference on everything you will come across during development, but they "
"are a great starting point."
msgstr ""

#: ../../systemdev/guides.rst:8
msgid ""
"If you get stuck at any point while going through this documentation, please "
"contact us for help via `the UBports Forum <https://forums.ubports.com>`_ or "
"your preferred communication medium."
msgstr ""

#: ../../systemdev/index.rst:2
msgid "System software development"
msgstr ""

#: ../../systemdev/index.rst:4
msgid ""
"This section has various documents which will teach you how to work with the "
"system level of Ubuntu Touch. This includes the Kernel, Android HAL, Ubuntu "
"UI Toolkit, Unity8, and all of the other software that makes Ubuntu Touch "
"what it is."
msgstr ""

#: ../../systemdev/index.rst:6
msgid ""
"This section does not cover most of the *applications* preinstalled on "
"Ubuntu Touch. See :doc:`/contribute/preinstalled-apps` for more information "
"on those."
msgstr ""

#: ../../systemdev/kernel-hal.rst:2
msgid "Kernel and hardware abstraction"
msgstr ""

#: ../../systemdev/kernel-hal.rst:4
msgid ""
"This page documents the resources and processes to build the kernel and "
"hardware abstraction for UT devices. This document is useful if you would "
"like to work on:"
msgstr ""

#: ../../systemdev/kernel-hal.rst:6
msgid "A hardware related issue (camera, sensors, radios)"
msgstr ""

#: ../../systemdev/kernel-hal.rst:7
msgid "A Linux kernel related issue"
msgstr ""

#: ../../systemdev/kernel-hal.rst:8
msgid "An issue related to the system-image upgrade process"
msgstr ""

#: ../../systemdev/kernel-hal.rst:10
msgid ""
"This document is not useful if you would like to modify :doc:`../contribute/"
"preinstalled-apps` or :doc:`System software <../systemdev/index>`. See the "
"respective documentation for each."
msgstr ""

#: ../../systemdev/kernel-hal.rst:14
msgid ""
"There are a few different groups of Ubuntu Touch devices with respect to how "
"the kernel and hardware abstraction is implemented:"
msgstr ""

#: ../../systemdev/kernel-hal.rst:16 ../../systemdev/kernel-hal.rst:29
msgid "Android 5.1 based ports"
msgstr ""

#: ../../systemdev/kernel-hal.rst:17 ../../systemdev/kernel-hal.rst:64
msgid "Halium based ports"
msgstr ""

#: ../../systemdev/kernel-hal.rst:18
msgid "Linux kernel"
msgstr ""

#: ../../systemdev/kernel-hal.rst:31
msgid ""
"Android 5.1 based ports of Ubuntu Touch consist of the Linux kernel for this "
"device plus a minimal Android system that is used to enable all the "
"hardware. Every device has it's own fork of the Linux kernel. They are all "
"heavily modified for the specific hardware used in that device. These forks "
"are also based off quite old Linux kernel versions."
msgstr ""

#: ../../systemdev/kernel-hal.rst:33
msgid ""
"For some devices continuous integration (CI) has been set up to build both "
"the Kernel as well as the Android system. Other devices have to be built "
"manually from their repositories. For a third group of devices, we do not "
"unfortunately, have the full source code available. The Bq and Meizu devices "
"have kernel sources, but the \"Android device tree\" is not publicly "
"available. The manufacturers of these devices provided binary builds instead."
msgstr ""

#: ../../systemdev/kernel-hal.rst:37
msgid "With CI"
msgstr ""

#: ../../systemdev/kernel-hal.rst:36
msgid "Nexus 5 (hammerhead)"
msgstr ""

#: ../../systemdev/kernel-hal.rst:37
msgid "OnePlus One (bacon)"
msgstr ""

#: ../../systemdev/kernel-hal.rst:38
msgid "Fairphone 2 (FP2)"
msgstr ""

#: ../../systemdev/kernel-hal.rst:40
msgid "Manual builds"
msgstr ""

#: ../../systemdev/kernel-hal.rst:40
msgid "Nexus 4 (mako)"
msgstr ""

#: ../../systemdev/kernel-hal.rst:41
msgid "Nexus 7 2013 Wifi (flo)"
msgstr ""

#: ../../systemdev/kernel-hal.rst:49
msgid "(Partial) Binary builds"
msgstr ""

#: ../../systemdev/kernel-hal.rst:43
msgid ""
"Bq Aquaris E4.5 (`krillin <https://github.com/ubports/kernel_krillin>`_)"
msgstr ""

#: ../../systemdev/kernel-hal.rst:44
msgid ""
"Bq Aquaris E5 (`vegetahd <https://github.com/ubports/kernel_vegetahd>`_)"
msgstr ""

#: ../../systemdev/kernel-hal.rst:45
msgid ""
"Bq Aquaris M10 HD (`cooler <https://github.com/ubports/kernel_bq_m10>`_)"
msgstr ""

#: ../../systemdev/kernel-hal.rst:46
msgid "Bq Aquaris M10 FHD (frieza)"
msgstr ""

#: ../../systemdev/kernel-hal.rst:47
msgid "Meizu MX4 (`arale <https://github.com/ubports/kernel_arale>`_)"
msgstr ""

#: ../../systemdev/kernel-hal.rst:48
msgid "Meizu Pro 5 (`turbo <https://github.com/ubports/kernel_turbo>`_)"
msgstr ""

#: ../../systemdev/kernel-hal.rst:49
msgid "Nexus 7 2013 GSM (deb)"
msgstr ""

#: ../../systemdev/kernel-hal.rst:51
msgid ""
"Detailed steps for the three CI enabled devices can be found under  :doc:"
"`HAL for Nexus 5, OnePlus One, and Fairphone 2 <ubp-5.1>`."
msgstr ""

#: ../../systemdev/kernel-hal.rst:53
msgid ""
"For the Nexus 7 2013 Wifi (flo) head  over to the `Community Ports "
"repository for flo <https://gitlab.com/ubports/community-ports/flo>`_."
msgstr ""

#: ../../systemdev/kernel-hal.rst:55
msgid ""
"The port for the Nexus 7 2013 GSM (deb) was created by a community member. "
"Unfortunately those repositories have disappeared over time. So this build "
"also falls into the group of prebuilt binaries."
msgstr ""

#: ../../systemdev/kernel-hal.rst:57
msgid "Todo"
msgstr ""

#: ../../systemdev/kernel-hal.rst:58
msgid "Document the process for Nexus 4 (mako)"
msgstr ""

#: ../../systemdev/kernel-hal.rst:66
msgid ""
"Newer ports to Android devices are based on `Halium <https://docs.halium."
"org>`_. In some aspects Halium is similar to the 5.1 based ports:"
msgstr ""

#: ../../systemdev/kernel-hal.rst:68
msgid ""
"It also uses the device specific fork of the Linux kernel provided by the "
"manufacturer."
msgstr ""

#: ../../systemdev/kernel-hal.rst:69
msgid "It also uses a minimal Android system to enable some hardware."
msgstr ""

#: ../../systemdev/kernel-hal.rst:71
msgid ""
"However, Halium permits a more generic way of porting to Android devices. "
"This allows the work to be shared between multiple projects that bring "
"different flavours of Linux systems to Android devices. Halium ports are "
"also based on newer Android versions 7.1 and above."
msgstr ""

#: ../../systemdev/kernel-hal.rst:73
msgid ""
"Some examples of Halium ports are those for Sony Xperia X and Oneplus 3. "
"Basically all devices that are listed on `devices.ubuntu-touch.io <https://"
"devices.ubuntu-touch.io>`_, expect those explicitly mentioned above as 5.1, "
"or below as Linux based ports."
msgstr ""

#: ../../systemdev/kernel-hal.rst:75
msgid ""
"All new ports of UT to Android devices should follow the Halium process. "
"Further details can be found under :doc:`Halium porting <../porting/"
"introduction/index>`"
msgstr ""

#: ../../systemdev/kernel-hal.rst:78
msgid "Linux based ports"
msgstr ""

#: ../../systemdev/kernel-hal.rst:80
msgid ""
"Linux based port refers to devices where a Linux kernel is used without any "
"Android parts. The following devices are in this group:"
msgstr ""

#: ../../systemdev/kernel-hal.rst:82
msgid "`Desktop PC (x86) <https://devices.ubuntu-touch.io/device/x86/>`_"
msgstr ""

#: ../../systemdev/kernel-hal.rst:83
msgid "Librem 5 (librem5)"
msgstr ""

#: ../../systemdev/kernel-hal.rst:84
msgid "Pinebook (pinebook)"
msgstr ""

#: ../../systemdev/kernel-hal.rst:85
msgid ":doc:`Pinephone (pinephone) <kernel-pinephone>`"
msgstr ""

#: ../../systemdev/kernel-hal.rst:86
msgid ":doc:`Pinetab (pinetab) <kernel-pinephone>`"
msgstr ""

#: ../../systemdev/kernel-hal.rst:87
msgid ""
"`Raspberry Pi (rpi) <https://gitlab.com/ubports/community-ports/"
"raspberrypi>`_ (see also this `blog post <https://ubports.com/blog/ubports-"
"blog-1/post/raspberry-pi-266>`_)"
msgstr ""

#: ../../systemdev/kernel-pinephone.rst:2
msgid "PinePhone and PineTab kernel"
msgstr ""

#: ../../systemdev/kernel-pinephone.rst:4
msgid ""
"This document describes how to build and install the PinePhone or PineTab "
"kernel. First the recovery system is explained. Then the actual building and "
"installation. At the bottom there are some references."
msgstr ""

#: ../../systemdev/kernel-pinephone.rst:7
msgid "Recovery"
msgstr ""

#: ../../systemdev/kernel-pinephone.rst:9
msgid ""
"The Ubuntu Touch image contains a `recovery <https://github.com/ubports/"
"jumpdrive>`_ boot mode based on \"jumpdrive\". To get into the recovery "
"press and hold the power and volume-up buttons until the led turns on."
msgstr ""

#: ../../systemdev/kernel-pinephone.rst:11
msgid ""
"The recovery presents the PinePhone as a network device over USB and runs a "
"telnet server. When you connect the PinePhone to your desktop via USB, you "
"will see the rndis device show up in your desktop's ``dmesg``::"
msgstr ""

#: ../../systemdev/kernel-pinephone.rst:19
msgid "You can log in to the recovery system with ``telnet 172.16.42.1``."
msgstr ""

#: ../../systemdev/kernel-pinephone.rst:21
msgid ""
"The recovery also exposes the eMMC and the microSD card over USB. Assuming "
"you have already installed Ubuntu Touch on your microSD card you will see "
"something like this in your desktop's ``dmesg``::"
msgstr ""

#: ../../systemdev/kernel-pinephone.rst:35
msgid ""
"The eMMC with jumpdrive contains two partitions: pmOS_boot and pmOS_root."
msgstr ""

#: ../../systemdev/kernel-pinephone.rst:37
msgid ""
"The microSD card with Ubuntu Touch contains 10 partitions: loader, scr, "
"persist, boot_a, boot_b, recovery_a, recovery_b, cache, system and userdata. "
"To update the kernel you want to mount boot_a. Check which device is the "
"SDcard in your OS and mount boot_a. In the example above this is sdc4. "
"Inside that partition you'll see the kernel vmlinuz and related files: "
"``config-5.6.0-pine64`` ``dtb`` ``initrd.img`` ``modules/`` ``System."
"map-5.6.0-pine64`` ``vmlinuz``."
msgstr ""

#: ../../systemdev/kernel-pinephone.rst:40
msgid "Building the kernel"
msgstr ""

#: ../../systemdev/kernel-pinephone.rst:42
msgid ""
"To install dependencies, get the `source code <https://gitlab.com/pine64-org/"
"linux/-/tree/pine64-kernel-ubports>`_, configure and build the kernel, run "
"the following::"
msgstr ""

#: ../../systemdev/kernel-pinephone.rst:51
msgid "Install the kernel"
msgstr ""

#: ../../systemdev/kernel-pinephone.rst:53
msgid ""
"Boot into recovery and mount boot_a. Make a backup if needed. Then copy over "
"your newly built kernel and if needed modules::"
msgstr ""

#: ../../systemdev/kernel-pinephone.rst:61
msgid ""
"Afterwards be sure to unmount the partition so it is cleanly written. Now "
"you can reboot the PinePhone. Once booted, you can verify that the kernel "
"has been successfully updated by checking the build date with ``uname -a`` "
"on the device."
msgstr ""

#: ../../systemdev/kernel-pinephone.rst:64
#: ../../systemdev/mms-infrastructure.rst:53
msgid "References"
msgstr ""

#: ../../systemdev/kernel-pinephone.rst:66
msgid ""
"`Pine64 wiki <https://wiki.pine64.org/index.php/PinePhone>`_ has general HW "
"info, pointers to other PinePhone OS projects, HW revisions, serial UART "
"over headphone jack (also in their store), spec sheets, known HW issues, etc"
msgstr ""

#: ../../systemdev/kernel-pinephone.rst:67
msgid ""
"`Main UBports repository <https://gitlab.com/ubports/community-ports/"
"pinephone>`_ has instructions for how to install UT images on the PinePhone"
msgstr ""

#: ../../systemdev/kernel-pinephone.rst:68
msgid ""
"`UBPorts issue tracker <https://gitlab.com/ubports/community-ports/"
"pinephone/-/issues>`_"
msgstr ""

#: ../../systemdev/kernel-pinephone.rst:69
msgid ""
"`PinePhone forum from Pine64 <https://forum.pine64.org/forumdisplay.php?"
"fid=120>`_ is where many other communities gather that work with the "
"PinePhone"
msgstr ""

#: ../../systemdev/kernel-pinephone.rst:70
msgid ""
"`sunxi <https://linux-sunxi.org>`_ community is where much of the "
"`mainlining effort <https://linux-sunxi.org/Linux_mainlining_effort>`_ for "
"Allwinner devices including the PinePhone takes place. Note their `build "
"instructions <https://linux-sunxi.org/Mainline_Kernel_Howto>`_."
msgstr ""

#: ../../systemdev/kernel-pinephone.rst:71
msgid ""
"`Crust firmware <https://github.com/crust-firmware/crust>`_ implements a "
"deep sleep state and runs on a dedicated System Control Processor outside "
"the main CPU and DRAM."
msgstr ""

#: ../../systemdev/mms-infrastructure.rst:2
msgid "MMS infrastructure components"
msgstr ""

#: ../../systemdev/mms-infrastructure.rst:4
msgid ""
"`oFono <https://github.com/ubports/ofono>`_ - responsible for providing the "
"data context used to transfer MMS data (image/music). It also propagates wap "
"push notifications to upper layers."
msgstr ""

#: ../../systemdev/mms-infrastructure.rst:6
msgid ""
"`nuntium <https://github.com/ubports/nuntium>`_ - daemon that listens to wap "
"push notifications and activates the MMS data context on ofono on demand to "
"send/receive MMS's. It provides a local store."
msgstr ""

#: ../../systemdev/mms-infrastructure.rst:8
msgid ""
"`telepathy-ofono <https://github.com/ubports/telepathy-ofono>`_  - talks to "
"nuntium through dbus and is used to both relay messages from phone-app to "
"nuntium and inject into the telepathy infrastructure MMS's received by "
"nuntium as `multi-part messages <http://telepathy.freedesktop.org/spec/"
"Channel_Interface_Messages.html#Mapping:Message_Part>`_. This component also "
"marks messages as read and delete successfully received messages from "
"nuntium."
msgstr ""

#: ../../systemdev/mms-infrastructure.rst:10
msgid ""
"`history-service <https://github.com/ubports/history-service>`_ - this "
"component watches the telepathy communication and store the messages "
"received by telepathy-ofono or sent by messaging-app."
msgstr ""

#: ../../systemdev/mms-infrastructure.rst:12
msgid ""
"`telephony-service-approver <https://github.com/ubports/telephony-"
"service>`_  - this component is in charge of adding SMS's to the messaging "
"menu and to display incoming text notifications."
msgstr ""

#: ../../systemdev/mms-infrastructure.rst:14
msgid ""
"`messaging-app <https://github.com/ubports/messaging-app>`_ - It renders "
"MMS's in the conversation view and also provides a way to attach media files "
"to a message in order to send an MMS."
msgstr ""

#: ../../systemdev/mms-infrastructure.rst:17
msgid "General Description"
msgstr ""

#: ../../systemdev/mms-infrastructure.rst:20
msgid "Incoming MMS"
msgstr ""

#: ../../systemdev/mms-infrastructure.rst:22
msgid ""
"An MMS WAP push notification is received by ofono and propagated to nuntium"
msgstr ""

#: ../../systemdev/mms-infrastructure.rst:23
msgid ""
"nuntium enables the MMS context in ofono, retrieves the content from `MMSC "
"<https://en.wikipedia.org/wiki/Multimedia_Messaging_Service>`_ and "
"propagates the new MMS to upper layers."
msgstr ""

#: ../../systemdev/mms-infrastructure.rst:24
msgid "A new MMS arrives at telepathy-ofono."
msgstr ""

#: ../../systemdev/mms-infrastructure.rst:25
msgid ""
"If automatic retrieval is not enabled or not available at the moment, a "
"control message is sent to the app"
msgstr ""

#: ../../systemdev/mms-infrastructure.rst:26
msgid "messaging-app request the retrieval of the message to telepathy-ofono."
msgstr ""

#: ../../systemdev/mms-infrastructure.rst:27
msgid ""
"After the message is retrieved from MMSC, it is delivered to the apps via "
"normal text channel in a multi-part message (one text/html part, one text/"
"plain part and one part per attachment). If the control message was "
"previously delivered, this real message have a flag telling it is a "
"replacement for the previous message."
msgstr ""

#: ../../systemdev/mms-infrastructure.rst:28
msgid ""
"The new message history service saves the attachment parts to disk, and "
"replaces the paths on text/html to point to the new attachment locations. It "
"also saves a flag and the content type."
msgstr ""

#: ../../systemdev/mms-infrastructure.rst:31
msgid "Outgoing MMS"
msgstr ""

#: ../../systemdev/mms-infrastructure.rst:33
msgid ""
"messaging-app creates a new text channel in telepathy-ofono, or uses an "
"existing channel."
msgstr ""

#: ../../systemdev/mms-infrastructure.rst:34
msgid "messaging-app sends the MMS as a multi-part message to telepathy-ofono"
msgstr ""

#: ../../systemdev/mms-infrastructure.rst:35
msgid ""
"nuntium enables the MMS context in ofono, sends the MMS through MMSC and "
"signals the upper layers about the current status (sent, draft)."
msgstr ""

#: ../../systemdev/mms-infrastructure.rst:36
msgid "telepathy-ofono sends signals to applications with delivery reports."
msgstr ""

#: ../../systemdev/mms-infrastructure.rst:39
msgid "Incoming MMS diagram"
msgstr ""

#: ../../systemdev/mms-infrastructure.rst:-1
msgid "incoming-MMS.png"
msgstr ""

#: ../../systemdev/mms-infrastructure.rst:46
msgid "Outgoing MMS diagram"
msgstr ""

#: ../../systemdev/mms-infrastructure.rst:-1
msgid "outgoing-MMS.png"
msgstr ""

#: ../../systemdev/mms-infrastructure.rst:55
msgid "initial source: https://wiki.ubuntu.com/Touch/Specs/MMSInfrastructure"
msgstr ""

#: ../../systemdev/online-accounts.rst:2
msgid "Working on the Online Accounts subsystem"
msgstr ""

#: ../../systemdev/online-accounts.rst:4
msgid "The Online Accounts subsystem consists of the following components:"
msgstr ""

#: ../../systemdev/online-accounts.rst:6
msgid ""
"The `Accounts UI <https://github.com/ubports/ubuntu-system-settings-online-"
"accounts>`_: this provides the user facing components and the base classes "
"for the whole Online Accounts feature. More in detail, you will find these "
"subdirectories:"
msgstr ""

#: ../../systemdev/online-accounts.rst:8
msgid ""
"``click-hooks``: the programs run when a :ref:`Click application <click>` "
"making use of the Online Accounts functionality is installed or removed"
msgstr ""

#: ../../systemdev/online-accounts.rst:9
msgid ""
"``client``: the library that client applications can use to request access "
"to an account"
msgstr ""

#: ../../systemdev/online-accounts.rst:10
msgid ""
"``online-accounts-service``: the main service, implementing the logic to "
"process client requests; it has no UI, but is able to attach the ``online-"
"accounts-ui`` on top of an application's UI"
msgstr ""

#: ../../systemdev/online-accounts.rst:11
msgid ""
"``online-accounts-ui``: the user interface which pops up when applications "
"interact with online accounts (for example, the dialog that appears when an "
"application requests access to an account)"
msgstr ""

#: ../../systemdev/online-accounts.rst:12
msgid ""
"``plugins``: the base classes and QML elements that account plugins can use "
"in their implementation"
msgstr ""

#: ../../systemdev/online-accounts.rst:13
msgid ""
"``system-settings-plugin``: the user interface for the Accounts panel in the "
"System Settings application"
msgstr ""

#: ../../systemdev/online-accounts.rst:15
msgid ""
"The `Account plugins <https://github.com/ubports/account-plugins>`_ define "
"the available account providers and implement the user interface and logic "
"for creating the accounts"
msgstr ""

#: ../../systemdev/online-accounts.rst:16
msgid ""
"A set of components from the `Accounts&SSO project <https://gitlab.com/"
"accounts-sso>`_: while development happens in the upstream projects, the "
"UBports forks add the Debian packaging. These projects are:"
msgstr ""

#: ../../systemdev/online-accounts.rst:18
msgid ""
"`libaccounts-glib <https://github.com/ubports/libaccounts-glib>`_: account "
"management API for C/GLib applications"
msgstr ""

#: ../../systemdev/online-accounts.rst:19
msgid ""
"`libsignon-glib <https://github.com/ubports/libsignon-glib>`_: "
"authentication API for C/GLib applications"
msgstr ""

#: ../../systemdev/online-accounts.rst:20
msgid ""
"`libaccounts-qt <https://github.com/ubports/libaccounts-qt>`_: account "
"management API for Qt applications"
msgstr ""

#: ../../systemdev/online-accounts.rst:21
msgid ""
"`signond <https://github.com/ubports/signon>`_: authentication daemon, "
"exposing a D-Bus API. It includes the ``libsignon-qt`` library, which offers "
"an authentication API for Qt applications"
msgstr ""

#: ../../systemdev/online-accounts.rst:22
msgid ""
"`signon-plugin-oauth2 <https://github.com/ubports/signon-plugin-oauth2>`_: "
"OAuth (1.0 and 2.0) plugin for signond"
msgstr ""

#: ../../systemdev/online-accounts.rst:23
msgid ""
"`accounts-qml-module <https://github.com/ubports/accounts-qml-module>`_ "
"authentication and account management API, for QML applications (can be used "
"when implementing account plugins, too)"
msgstr ""

#: ../../systemdev/online-accounts.rst:25
msgid ""
"The `account-polld service <https://github.com/ubports/account-polld>`_, "
"which runs in the background and checks every 5 minutes for new account "
"activity (the interval is decided by the `Ubuntu Push service <https://"
"github.com/ubports/ubuntu-push>`_)"
msgstr ""

#: ../../systemdev/online-accounts.rst:26
msgid ""
"The `account-polld-plugins-go <https://github.com/ubports/account-polld-"
"plugins-go>`_, a repository of plugins for the ``account-polld`` service. "
"The plugins in this repository are written in Go, but plugins can be written "
"in whatever language and can reside in different repositories"
msgstr ""

#: ../../systemdev/online-accounts.rst:33
msgid "Account creation issues"
msgstr ""

#: ../../systemdev/online-accounts.rst:35
msgid ""
"It may happen that the account creation fails, either due to communication "
"issues with the remote server, or to some bug in the account plugin itself "
"(this can easily happen while developing a new plugin). In order to debug "
"such situations, you can open a terminal (it's easier if done from a remote "
"shell -- you can gain a shell on the device using :doc:`/userguide/"
"advanceduse/adb` or :doc:`/userguide/advanceduse/ssh`) and start the "
"``online-accounts-service`` in debug mode:"
msgstr ""

#: ../../systemdev/online-accounts.rst:42
msgid ""
"If you believe that the issue might be caused by some errors in the "
"authentication phase, you can also enabled extensive logging by ``signond`` "
"like this:"
msgstr ""

#: ../../systemdev/online-accounts.rst:50
msgid ""
"At this point, repeat the operation that was failing, and you'll get all "
"debugging output printed on the console."
msgstr ""

#: ../../systemdev/qtmir-qtubuntu.rst:2
msgid "QtMir and QtUbuntu"
msgstr ""

#: ../../systemdev/qtmir-qtubuntu.rst:4
msgid ""
"`QtMir`_ and `QtUbuntu`_ are `Qt Platform Abstractions`_ (QPAs) for the "
"Ubuntu Touch platform. QtMir can be thought of as a server for Unity8 while "
"QtUbuntu is used for client applications. Each of them allows their "
"respective domains to use Qt's high-level abstractions of surfaces, windows, "
"controls, and more, without worrying about the underlying operating system."
msgstr ""

#: ../../systemdev/qtmir-qtubuntu.rst:7
msgid "QtMir"
msgstr ""

#: ../../systemdev/qtmir-qtubuntu.rst:9
msgid ""
"The `QtMir`_ QPA allows Unity8, the shell of Ubuntu Touch, to be written in "
"QML and Qt C++ while operating on Mir Surfaces and Windows. It also allows "
"the desktop to be represented and reasoned about as a `Qt Scene Graph`_."
msgstr ""

#: ../../systemdev/qtmir-qtubuntu.rst:11
msgid ""
"You'll find most of QtMir's logging in Unity8's logs, normally stored at ``/"
"home/phablet/.cache/upstart/unity8`` on Ubuntu Touch. Different logging "
"categories, like ``qtmir.sessions`` and ``qtmir.surfaces``, relate directly "
"to different modules within QtMir's codebase."
msgstr ""

#: ../../systemdev/qtmir-qtubuntu.rst:13
msgid ""
"While Unity8 shows almost all QtMir logging by default, you can enable even "
"more verbose logging by placing the following content in the file ``/usr/"
"share/upstart/sessions/unity8.override``:"
msgstr ""

#: ../../systemdev/qtmir-qtubuntu.rst:19
msgid "Then restart Unity8:"
msgstr ""

#: ../../systemdev/qtmir-qtubuntu.rst:26
msgid "QtUbuntu"
msgstr ""

#: ../../systemdev/qtmir-qtubuntu.rst:28
msgid ""
"The `QtUbuntu`_ QPA uses the `Mir client API`_ and `Ubuntu Platform API`_ to "
"provide Ubuntu Touch apps with a stable hardware compatibility API."
msgstr ""

#: ../../systemdev/qtmir-qtubuntu.rst:30
msgid ""
"Since QtUbuntu is used directly by apps, any logging output from it will be "
"located in an app's log file. Most of the time, QtUbuntu gives no logging "
"output. However, if you would like to receive more output, you can set the "
"``QT_LOGGING_RULES`` environment variable appropriately. Since apps on "
"Ubuntu Touch are started using Upstart's user session, you can set this for "
"all apps until you restart your device with the following command:"
msgstr ""

#: ../../systemdev/qtmir-qtubuntu.rst:36
msgid "We plan to replace QtUbuntu with QtWayland in the future."
msgstr ""

#: ../../systemdev/qtmir-qtubuntu.rst:39
msgid "Components"
msgstr ""

#: ../../systemdev/qtmir-qtubuntu.rst:41
msgid ""
"QtUbuntu has a number of sub-components to provide other features in the "
"Ubuntu Touch platform. In theory, these could be used on other platforms to "
"provide similar features. In practice, this has never happened."
msgstr ""

#: ../../systemdev/qtmir-qtubuntu.rst:43
msgid ""
"`QtUbuntu-Camera`_ provides the ``aalCamera`` (Android Abstraction Layer "
"Camera) plugin to `QtMultimedia`_. This plugin allows apps to access Android "
"device cameras through the QtMultimedia standard API. We are trying to "
"replace this component with the `gst-droid`_ plugin for GStreamer for all "
"new Android device ports."
msgstr ""

#: ../../systemdev/qtmir-qtubuntu.rst:45
msgid ""
"`QtUbuntu-Sensors`_ provides Android haptic feedback, GPS, orientation, and "
"accelerometer sensors to `QtSensors`_. We are trying to replace this "
"component with `sensorfw`_, a single daemon capable of providing these "
"functions using Android or standard Linux kernel drivers."
msgstr ""

#: ../../systemdev/qtmir-qtubuntu.rst:47
msgid ""
"`QtUbuntu-Media`_ provides hardware encoding and decoding of audio/video "
"content on Android devices to `QtMultimedia`_. It is tightly integrated with "
"`media-hub`_."
msgstr ""

#: ../../systemdev/reference.rst:2
msgid "System Software reference"
msgstr ""

#: ../../systemdev/reference.rst:4
msgid ""
"This section includes reference guides on how different parts of the Ubuntu "
"Touch system interact to create the user experience."
msgstr ""

#: ../../systemdev/reference.rst:6
msgid ""
"There's not much here yet, but maybe you'd like to add some reference "
"material? Check out :doc:`our guide to contributing to documentation </"
"contribute/documentation>` to learn more."
msgstr ""

#: ../../systemdev/testing-locally.rst:2
msgid "Making changes and testing locally"
msgstr ""

#: ../../systemdev/testing-locally.rst:4
msgid ""
"On this page you'll find information on how to build Ubuntu Touch system "
"software for your device. Most of the software preinstalled on your Ubuntu "
"Touch device is shipped in the device image in the form of a Debian package. "
"This format is used by several Linux distributions, such as Debian, Ubuntu, "
"and Linux Mint. Plenty of `documentation on deb packages <https://www.debian."
"org/doc/manuals/maint-guide/index.en.html>`__ is available, so we won't be "
"covering it here. Besides, in most cases you'll find yourself in need of "
"modifying existing software rather than developing new packages from "
"scratch. For this reason, this guide is mostly about recompiling an existing "
"Ubuntu Touch package."
msgstr ""

#: ../../systemdev/testing-locally.rst:6
msgid ""
"There are essentially three ways of developing Ubuntu Touch system software "
"locally:"
msgstr ""

#: ../../systemdev/testing-locally.rst:8
msgid "`Building packages in a chroot using sbuild`_"
msgstr ""

#: ../../systemdev/testing-locally.rst:9
msgid "`Cross-building with crossbuilder`_"
msgstr ""

#: ../../systemdev/testing-locally.rst:10
msgid "`Building on the device itself`_"
msgstr ""

#: ../../systemdev/testing-locally.rst:13
msgid "Pros and cons of sbuild and crossbuilder"
msgstr ""

#: ../../systemdev/testing-locally.rst:15
msgid ""
"sbuild uses a more minimal chroot-based build environment, while "
"crossbuilder uses an LXD container with more pre-installed packages. When "
"building with crossbuilder pre-installed build dependencies might be missed "
"which would be caught by sbuild. crossbuilder can be quicker for subsequent "
"builds since the LXD container persists. sbuild installs all build "
"dependencies on each run. sbuild automatically creates a log file and runs "
"`lintian <https://lintian.debian.org/manual/lintian.html>`__ on the built "
"packages in order to detect any problems. The use of LXD by crossbuilder "
"also allows for easier inspection, debugging and manual modification of the "
"build environment. crossbuilder can also automatically deploy build packages "
"on a connected device via ADB."
msgstr ""

#: ../../systemdev/testing-locally.rst:21
msgid ""
"We'll examine the use of crossbuilder and builds on the device using "
"`address-book-app <https://gitlab.com/ubports/core/address-book-app>`__ (the "
"Contacts application) as an example."
msgstr ""

#: ../../systemdev/testing-locally.rst:23
msgid ""
"We only recommend developing packages using a device with Ubuntu Touch "
"installed from the devel channel. This ensures that you are testing your "
"changes against the most current state of the Ubuntu Touch code."
msgstr ""

#: ../../systemdev/testing-locally.rst:26
msgid "Preparing a package for a build"
msgstr ""

#: ../../systemdev/testing-locally.rst:28
msgid ""
"``sbuild`` or ``crossbuilder`` need to be invoked from a debianized package "
"source tree (i.e. the package sources with a ``debian`` subdirectory), "
"UBports packages mostly consists of git repositories containing native or "
"non-native packages.  Native packages can be built directly and the "
"following script can be used in order to prepare a non-native package for a "
"build::"
msgstr ""

#: ../../systemdev/testing-locally.rst:67
msgid "Building packages in a chroot using sbuild"
msgstr ""

#: ../../systemdev/testing-locally.rst:69
msgid ""
"`sbuild <https://tracker.debian.org/pkg/sbuild>`__ is a tool for building "
"Debian packages from source in an isolated environment using a chroot "
"created by `schroot <https://wiki.debian.org/Schroot>`__. It closely "
"resembles the package build process on the UBports CI system by using an "
"isolated build environment with a minimal set of pre-installed packages. "
"This detects any missing build dependencies and sbuild will also detect "
"problems with the resulting packages by running `lintian <https://lintian."
"debian.org/manual/lintian.html>`__"
msgstr ""

#: ../../systemdev/testing-locally.rst:72
msgid "Prerequisites"
msgstr ""

#: ../../systemdev/testing-locally.rst:74
msgid ""
"A host system running either Debian 11 (Bullseye) or later or Ubuntu 20.04 "
"(Focal Fossa) or later is required. An easy and performant way to set up "
"Debian or Ubuntu on other distributions is to run it in a container using "
"`LXD <https://linuxcontainers.org/lxd/getting-started-cli/#installing-a-"
"package>`__."
msgstr ""

#: ../../systemdev/testing-locally.rst:77
msgid ""
"A LXD container requires the following configuration setting in order to "
"allow debootstrap to use the mknod system call for creating pseudo devices "
"such as ``/dev/null`` inside a chroot::"
msgstr ""

#: ../../systemdev/testing-locally.rst:81
msgid ""
"It is assumed that the user who is building packages is allowed to execute "
"commands with superuser privilege using ``sudo``."
msgstr ""

#: ../../systemdev/testing-locally.rst:83
msgid ""
"``sbuild`` uses ``schroot`` in order to manage chroots which in turn uses "
"debootstrap for creating the chroot.  The required packages are installed "
"with::"
msgstr ""

#: ../../systemdev/testing-locally.rst:87
msgid ""
"A Debian or Ubuntu system can also be installed inside a virtual machine, "
"however this comes with a performance overhead."
msgstr ""

#: ../../systemdev/testing-locally.rst:90
msgid "Setting up sbuild"
msgstr ""

#: ../../systemdev/testing-locally.rst:92
msgid ""
"An unprivileged user needs to be added to the sbuild group in order to gain "
"the necessary privilege to build packages::"
msgstr ""

#: ../../systemdev/testing-locally.rst:96
msgid ""
"The build user can configure ``sbuild`` by creating a file ``~/.sbuildrc`` "
"as follows::"
msgstr ""

#: ../../systemdev/testing-locally.rst:104
msgid ""
"For further customizations see the example file at ``/usr/share/doc/sbuild/"
"examples/example.sbuildrc``."
msgstr ""

#: ../../systemdev/testing-locally.rst:106
msgid "Create the directory ``~/logs`` if it does not exist, yet::"
msgstr ""

#: ../../systemdev/testing-locally.rst:111
msgid "Creating a build chroot"
msgstr ""

#: ../../systemdev/testing-locally.rst:112
msgid ""
"In order to create a chroot based on Ubuntu 20.04 (Focal Fossa) with the "
"amd64 architecture under the directory ``/srv/chroot/ubports-${distro}-"
"amd64`` (``chroot_base`` can be changed if needed) the following variables "
"can be defined for later use by the actual commands::"
msgstr ""

#: ../../systemdev/testing-locally.rst:118
msgid ""
"For creating a chroot based on Ubuntu 16.04 (Xenial Xerus) with the amd64 "
"architecture define the following variables instead::"
msgstr ""

#: ../../systemdev/testing-locally.rst:124
msgid ""
"In both cases the chroot will be created by running the following command::"
msgstr ""

#: ../../systemdev/testing-locally.rst:128
msgid ""
"A chroot for cross-building arm64 packages on an amd64 host can e.g. be "
"created under the directory ``/srv/chroot/ubports-${distro}-arm64`` using::"
msgstr ""

#: ../../systemdev/testing-locally.rst:133
msgid ""
"For cross-building armhf packages the above command can be used with "
"``arm64`` changed to ``armhf``."
msgstr ""

#: ../../systemdev/testing-locally.rst:135
msgid "The UBports package repository needs to be added using::"
msgstr ""

#: ../../systemdev/testing-locally.rst:142
msgid "Maintaining build chroots"
msgstr ""

#: ../../systemdev/testing-locally.rst:144
msgid ""
"Synchronizing package index files and subsequent package upgrades can be "
"performed using::"
msgstr ""

#: ../../systemdev/testing-locally.rst:149
msgid "Optimizations"
msgstr ""

#: ../../systemdev/testing-locally.rst:152
msgid "Caching package downloads"
msgstr ""

#: ../../systemdev/testing-locally.rst:154
msgid ""
"In order to save bandwidth and time it is highly advisable to cache "
"downloaded packages by using ``apt-cacher-ng``.  It can be installed with::"
msgstr ""

#: ../../systemdev/testing-locally.rst:158
msgid ""
"Chroots then need to be configured so that apt inside the chroot uses ``apt-"
"cacher-ng`` on the host as a proxy server::"
msgstr ""

#: ../../systemdev/testing-locally.rst:163
msgid "Caching compilation results"
msgstr ""

#: ../../systemdev/testing-locally.rst:165
msgid ""
"``ccache`` is a compiler cache which speeds up repeated compilation of the "
"same source code by caching the resulting object files. The actual cache is "
"stored on the host system and bind-mounted into ``sbuild`` chroots with a "
"``schroot`` hook::"
msgstr ""

#: ../../systemdev/testing-locally.rst:172
msgid ""
"In order to make use of ``ccache inside`` a ``sbuild`` chroot a wrapper "
"script needs to be created::"
msgstr ""

#: ../../systemdev/testing-locally.rst:185
msgid ""
"In order to use this wrapper script the following line must be added to the "
"configuration of a ``schroot`` chroot in ``/etc/schroot/chroot.d/``::"
msgstr ""

#: ../../systemdev/testing-locally.rst:190
msgid "Building a package"
msgstr ""

#: ../../systemdev/testing-locally.rst:191
msgid ""
"A build can be started from inside the debianized package source directory "
"using::"
msgstr ""

#: ../../systemdev/testing-locally.rst:195
msgid ""
"If the build was successful, the binary packages will be placed in the "
"parent directory.  The build log will be placed inside ``~/logs``.  In case "
"the build failed, the chroot can be inspected using::"
msgstr ""

#: ../../systemdev/testing-locally.rst:200
msgid "Further reading"
msgstr ""

#: ../../systemdev/testing-locally.rst:202
msgid ""
"Technical details are available from the `sbuild(1) <https://manpages.debian."
"org/bullseye/sbuild/sbuild.1.en.html>`__ and `sbuild-createchroot(8) "
"<https://manpages.debian.org/bullseye/sbuild/sbuild-createchroot.8.en."
"html>`__ manual pages and the `Debian wiki <https://wiki.debian.org/"
"sbuild>`__."
msgstr ""

#: ../../systemdev/testing-locally.rst:205
msgid "Cross-building with crossbuilder"
msgstr ""

#: ../../systemdev/testing-locally.rst:207
msgid ""
"Crossbuilder is a script which automates the setup and use of a crossbuild "
"environment for Debian packages. It is suitable for developers with any "
"device since the code compilation occurs on your desktop PC rather than the "
"target device. This makes Crossbuilder the recommended way to develop non-"
"trivial changes to Ubuntu Touch."
msgstr ""

#: ../../systemdev/testing-locally.rst:211
msgid ""
"Crossbuilder requires a Linux distribution with ``lxd`` installed and the "
"unprivileged commandset available. In other words, you must be able to run "
"the ``lxc`` command. If you are running Ubuntu on your host, Crossbuilder "
"will set up ``lxd`` for you."
msgstr ""

#: ../../systemdev/testing-locally.rst:213
msgid "Start by installing Crossbuilder on your host::"
msgstr ""

#: ../../systemdev/testing-locally.rst:218
msgid ""
"Crossbuilder is a shell script, so you don't need to build it. Instead, you "
"will need to add its directory to your ``PATH`` environment variable, so "
"that you can execute it from any directory::"
msgstr ""

#: ../../systemdev/testing-locally.rst:224
msgid "Now that Crossbuilder is installed, we can use it to set up LXD::"
msgstr ""

#: ../../systemdev/testing-locally.rst:228
msgid ""
"If this is the first time you have used LXD, you might need to reboot your "
"host once everything has completed."
msgstr ""

#: ../../systemdev/testing-locally.rst:230
msgid ""
"After LXD has been set up, a build for UBports based on Ubuntu 20.04 (Focal "
"Fossa) using the arm64 architecture can be started from inside the "
"debianized package source directory using::"
msgstr ""

#: ../../systemdev/testing-locally.rst:236
msgid ""
"For building against a different UBports release or architecture change "
"``distro`` and ``arch`` as needed."
msgstr ""

#: ../../systemdev/testing-locally.rst:238
msgid ""
"Crossbuilder will create the LXD container, download the development image, "
"install all your package build dependencies, and perform the package build. "
"It will also copy the packages over to your target device and install them "
"if it is connected (see :doc:`/userguide/advanceduse/adb` to learn more "
"about connecting your device). The first two steps (creating the LXD image "
"and getting the dependencies) can take a few minutes, but will be executed "
"only the first time you launch crossbuilder for a new package."
msgstr ""

#: ../../systemdev/testing-locally.rst:240
msgid ""
"Now, whenever you change the source code in your git repository, the same "
"changes will be available inside the container. The next time you type the "
"above ``crossbuilder`` command, only the changed files will be rebuilt."
msgstr ""

#: ../../systemdev/testing-locally.rst:242
msgid ""
"If the build dependencies have changed the following command can be used to "
"update the container accordingly (``distro`` and ``arch`` should be set as "
"above)::"
msgstr ""

#: ../../systemdev/testing-locally.rst:246
msgid ""
"While ``crossbuilder`` does not create log files for the build process, the "
"``script`` utility may be used for that purpose::"
msgstr ""

#: ../../systemdev/testing-locally.rst:250
msgid "When a build container is no longer needed it maybe removed using::"
msgstr ""

#: ../../systemdev/testing-locally.rst:255
msgid "Unit tests"
msgstr ""

#: ../../systemdev/testing-locally.rst:257
msgid ""
"By default crossbuilder does not run unit tests; that's both for speed "
"reasons, and because the container created by crossbuilder is not meant to "
"run native (target) executables: the development tools (qmake/cmake, make, "
"gcc, etc.) are all run in the host architecture, with no emulation (again, "
"for speed reasons). However, qemu emulation is available inside the "
"container, so it should be possible to run unit tests. You can do that by "
"getting a shell inside the container::"
msgstr ""

#: ../../systemdev/testing-locally.rst:261
msgid ""
"Then find the unit tests and execute them. Be aware that the emulation is "
"not perfect, so there's a very good chance that the tests will fail even "
"when they'd otherwise succeed when run in a proper environment. For that "
"reason, it's probably wiser not to worry about unit tests when working with "
"crossbuilder, and run them only when not cross-compiling."
msgstr ""

#: ../../systemdev/testing-locally.rst:264
msgid "Building on the device itself"
msgstr ""

#: ../../systemdev/testing-locally.rst:266
msgid ""
"This is the fastest and simplest method to develop small changes and test "
"them in nearly real-time. Depending on your device resources, however, it "
"might not be possible to follow this path: if you don't have enough free "
"space in your root filesystem you won't be able to install all the package "
"build dependencies; you may also run out of RAM while compiling."
msgstr ""

#: ../../systemdev/testing-locally.rst:270
msgid ""
"This method is limited. Many devices do not have enough free image space to "
"install the packages required to build components of Ubuntu Touch. "
"Installing packages has a risk of damaging the software on your device, "
"rendering it unusable. If this happens, you can :doc:`reinstall Ubuntu Touch "
"</userguide/install>`."
msgstr ""

#: ../../systemdev/testing-locally.rst:273
msgid ""
"In this example, we'll build and install the address-book-app. All commands "
"shown here must be run on your Ubuntu Touch device over a remote shell."
msgstr ""

#: ../../systemdev/testing-locally.rst:275
msgid ""
"You can gain a shell on the device using :doc:`/userguide/advanceduse/adb` "
"or :doc:`/userguide/advanceduse/ssh`. Remount the root filesystem read-write "
"to begin::"
msgstr ""

#: ../../systemdev/testing-locally.rst:279
msgid ""
"Next, install all the packages needed to rebuild the component you want to "
"modify (the Contacts app, in this example)::"
msgstr ""

#: ../../systemdev/testing-locally.rst:285
msgid ""
"Additionally, you probably want to install ``git`` in order to get your "
"app's source code on the device and later push your changes back into the "
"repository::"
msgstr ""

#: ../../systemdev/testing-locally.rst:289
msgid ""
"Once you're finished, you can retrieve the source for an app (in our "
"example, the address book) and move into its directory::"
msgstr ""

#: ../../systemdev/testing-locally.rst:294
msgid "Now, you are ready to build the package::"
msgstr ""

#: ../../systemdev/testing-locally.rst:298
msgid ""
"The ``dpkg-buildpackage`` command will print out the names of generated "
"packages. Install those packages with ``dpkg``::"
msgstr ""

#: ../../systemdev/testing-locally.rst:302
msgid ""
"Note, however, that you might not need to install all the packages: "
"generally, you can skip all packages whose names end with ``-doc`` or "
"``dev``, since they don't contain code used by the device."
msgstr ""

#: ../../systemdev/testing-locally.rst:305
msgid "Next steps"
msgstr ""

#: ../../systemdev/testing-locally.rst:307
msgid ""
"Now that you've successfully made changes and tested them locally, you're "
"ready to upload them to GitHub. Move on to the next page to learn about "
"using the UBports CI to build and provide development packages!"
msgstr ""

#: ../../systemdev/ubp-5.1.rst:2
msgid "hammerhead, bacon and FP2"
msgstr ""

#: ../../systemdev/ubp-5.1.rst:5
msgid ""
"This page documents how to build the Kernel and the Android image for the LG "
"Nexus 5 (hammerhead), OnePlus One (bacon), or Fairphone 2 (FP2)."
msgstr ""

#: ../../systemdev/ubp-5.1.rst:9
msgid ""
"We highly suggest that you follow the :doc:`Halium porting guide <../porting/"
"introduction/index>` if you want to bring up a new device. The steps in here "
"are only relevant for hammerhead, bacon and FP2."
msgstr ""

#: ../../systemdev/ubp-5.1.rst:11
msgid ""
"This document assumes you already have knowledge of building Android or "
"Halium. It also assumes that your device has Ubuntu Touch installed."
msgstr ""

#: ../../systemdev/ubp-5.1.rst:14
msgid "Getting set up"
msgstr ""

#: ../../systemdev/ubp-5.1.rst:16
msgid ""
"``ubp-5.1`` ports must be built using Ubuntu 16.04. A container or virtual "
"machine based on 16.04 is recommended for this purpose."
msgstr ""

#: ../../systemdev/ubp-5.1.rst:18
msgid "Let's get started by installing some build dependencies::"
msgstr ""

#: ../../systemdev/ubp-5.1.rst:24
msgid "Create a directory for your ``ubp-5.1`` source::"
msgstr ""

#: ../../systemdev/ubp-5.1.rst:29
msgid "Next, we'll initialize the repository::"
msgstr ""

#: ../../systemdev/ubp-5.1.rst:35
msgid ""
"The ``allthefixings`` branch is provided for convenience. It adds all of the "
"current UT device ports to the tree at the expense of a bit more downloaded "
"data. If you are download-sensitive, initialize using ``-b ubp-5.1`` and use "
"the manifest in `build-scripts <https://github.com/ubports/build-scripts>`__ "
"to pick the repos you like."
msgstr ""

#: ../../systemdev/ubp-5.1.rst:37
msgid "Finally, we'll download the source::"
msgstr ""

#: ../../systemdev/ubp-5.1.rst:42
msgid "Set up and build"
msgstr ""

#: ../../systemdev/ubp-5.1.rst:44
msgid ""
"With the sources downloaded, we need to set up our environment and build the "
"images. Make sure you're in your ``ubp-5.1`` directory to continue through "
"these steps."
msgstr ""

#: ../../systemdev/ubp-5.1.rst:46
msgid "First, bring in the default Android build environment::"
msgstr ""

#: ../../systemdev/ubp-5.1.rst:50
msgid ""
"Run ``lunch`` and pick the appropriate combo for your device. The name of "
"the combination should start with ``cm_``, followed by the device name and "
"ending with ``-userdebug``::"
msgstr ""

#: ../../systemdev/ubp-5.1.rst:54
msgid "With that done, the build can be started::"
msgstr ""

#: ../../systemdev/ubp-5.1.rst:59
msgid "Install the new image"
msgstr ""

#: ../../systemdev/ubp-5.1.rst:61
msgid ""
"Now that the build is complete, we can flash it to the device. Note that all "
"of these commands should be run from a terminal which has been set up with "
"``source build/envsetup.sh`` and ``lunch`` to ensure the needed tools are in "
"your PATH."
msgstr ""

#: ../../systemdev/ubp-5.1.rst:63
msgid ""
"We'll begin with the boot and recovery images. Boot your device into "
"fastboot mode and run the following commands::"
msgstr ""

#: ../../systemdev/ubp-5.1.rst:69
msgid ""
"Now boot your device to ensure your kernel build is sane. You may also want "
"to boot into recovery to ensure it is working as well."
msgstr ""

#: ../../systemdev/ubp-5.1.rst:71
msgid ""
"To install your new build of the system image, use the `replace-android-"
"system script <https://github.com/janimo/phablet-porting-scripts/"
"blob/68734ca07998b8e784397df77d9aca4b968b3815/build/replace-android-"
"system>`_. It can be run as follows with your device attached::"
msgstr ""

#: ../../systemdev/uploading-changes.rst:2
msgid "Uploading and testing with ``ubports-qa``"
msgstr ""

#: ../../systemdev/uploading-changes.rst:4
msgid ""
"The `UBports build service <https://ci.ubports.com>`_ is capable of building "
"Ubuntu Touch packages and deploying them to the `UBports repository <https://"
"repo.ubports.com>`_. This capability is offered to any developer who wishes "
"to take advantage of it."
msgstr ""

#: ../../systemdev/uploading-changes.rst:6
msgid ""
"This guide assumes that you have a cursory understanding of using Git and "
"making Pull Requests on GitHub."
msgstr ""

#: ../../systemdev/uploading-changes.rst:8
msgid ""
"To use the `UBports build service`_, make sure you understand our :doc:"
"`branch naming convention </about/process/branch-naming>`. It is required "
"that you follow the convention for deb-packages for CI to build your package "
"correctly."
msgstr ""

#: ../../systemdev/uploading-changes.rst:11
msgid "Fork the repository"
msgstr ""

#: ../../systemdev/uploading-changes.rst:13
msgid ""
"The first step to make a change to any repository you don't have write "
"access to is to fork it. Open your desired repository on GitHub and click "
"the \"Fork\" button in the upper right corner. If offered, select an "
"appropriate account to fork the repository to. Then, clone your fork to your "
"computer."
msgstr ""

#: ../../systemdev/uploading-changes.rst:15
msgid "Now you're ready to make changes!"
msgstr ""

#: ../../systemdev/uploading-changes.rst:18
msgid "Make and commit changes"
msgstr ""

#: ../../systemdev/uploading-changes.rst:20
msgid ""
"Now that you have the package source downloaded, you can make your desired "
"changes."
msgstr ""

#: ../../systemdev/uploading-changes.rst:22
msgid ""
"Before changing anything, make sure you have checked out the branch you want "
"to work from (probably ``xenial``, assuming you are making changes for the "
"phone images). Then, create a new branch abiding by the :doc:`branch naming "
"convention </about/process/branch-naming>`."
msgstr ""

#: ../../systemdev/uploading-changes.rst:24
msgid ""
"After making your changes, commit them with a descriptive commit message "
"stating what is wrong and why your changes fix that problem."
msgstr ""

#: ../../systemdev/uploading-changes.rst:26
msgid ""
"You have successfully created and committed your changes. Before pushing "
"your changes, we'll want to make sure your device will install them."
msgstr ""

#: ../../systemdev/uploading-changes.rst:29
msgid "Update the ``debian/changelog`` file"
msgstr ""

#: ../../systemdev/uploading-changes.rst:31
msgid ""
"Generally, ``apt`` will not install a new package from any repository if it "
"has a lower (or the same) version number as the package it replaces. Users "
"may also want to see the changes that are included in a new version of a "
"package. For that reason, we will need to update the package changelog to "
"add a new version."
msgstr ""

#: ../../systemdev/uploading-changes.rst:35
msgid ""
"This is not an exhaustive reference of the ``debian/changelog`` format. See "
"`deb-changelog(5) <https://manpages.debian.org/testing/dpkg-dev/deb-"
"changelog.5.en.html>`_ for more information."
msgstr ""

#: ../../systemdev/uploading-changes.rst:38
msgid "Determine a new version number"
msgstr ""

#: ../../systemdev/uploading-changes.rst:40
msgid ""
"To start, figure out what the current version numbering for the package is::"
msgstr ""

#: ../../systemdev/uploading-changes.rst:44
msgid ""
"This will return a few lines, but the first is the most important to us::"
msgstr ""

#: ../../systemdev/uploading-changes.rst:48
msgid ""
"The part inside the parentheses ``(0.24+ubports2)`` is our version number. "
"It consists of several parts:"
msgstr ""

#: ../../systemdev/uploading-changes.rst:50
msgid ""
"The ``0.24`` is the *upstream version number*, the version that the original "
"project maintainers give to the release we are using. For most UBports "
"projects, the repository you'll be working on is the original project code. "
"This makes UBports the \"upstream\" of that project."
msgstr ""

#: ../../systemdev/uploading-changes.rst:52
msgid ""
"If you are making large changes to the repository and UBports is the "
"upstream, you should increment the first part of the version number before "
"the plus (+) and reset the distribution suffix. In our example above, you "
"would make this new version number::"
msgstr ""

#: ../../systemdev/uploading-changes.rst:56
msgid ""
"If you are making changes only to the package build (files in the ``debian/"
"`` folder), it is best to only increment the version suffix::"
msgstr ""

#: ../../systemdev/uploading-changes.rst:62
msgid ""
"If you find a package which does not seem to follow the above versioning "
"format, please contact us to ask how to proceed."
msgstr ""

#: ../../systemdev/uploading-changes.rst:65
msgid "Write the changelog entry"
msgstr ""

#: ../../systemdev/uploading-changes.rst:67
msgid ""
"Now it is time to write your changelog entry! Start with the following "
"template::"
msgstr ""

#: ../../systemdev/uploading-changes.rst:75
msgid ""
"If you open the ``debian/changelog`` file, you'll find that every entry "
"follows this format. This helps everyone (including computers) read and "
"understand the contents. This is used, for example, to name the output "
"package correctly for every package version."
msgstr ""

#: ../../systemdev/uploading-changes.rst:77
msgid ""
"Let's assume I, John Doe, am making a packaging change to the ``morph-"
"browser`` package for Ubuntu Touch. I'll replace the different all-caps "
"placeholders above in the following way:"
msgstr ""

#: ../../systemdev/uploading-changes.rst:79
msgid "PACKAGE-NAME is replaced with ``morph-browser``"
msgstr ""

#: ../../systemdev/uploading-changes.rst:80
msgid "VERSION is replaced with ``0.24+ubports3`` (which we determined above)"
msgstr ""

#: ../../systemdev/uploading-changes.rst:81
msgid "DISTRIBUTION is replaced with ``xenial``"
msgstr ""

#: ../../systemdev/uploading-changes.rst:82
msgid ""
"CHANGES is replaced with the changes I made in this release. This will "
"include summarized information from my commit messages along with the bugs "
"fixed by those changes. If I've fixed multiple bugs, I'll create multiple "
"bullet points."
msgstr ""

#: ../../systemdev/uploading-changes.rst:83
msgid "NAME is replaced with my name, ``John Doe``"
msgstr ""

#: ../../systemdev/uploading-changes.rst:84
msgid "EMAIL is replaced with my e-mail, ``john.doe@example.com``."
msgstr ""

#: ../../systemdev/uploading-changes.rst:88
msgid ""
"You should not use a \"noreply\" e-mail as your EMAIL for package changelog "
"entries."
msgstr ""

#: ../../systemdev/uploading-changes.rst:90
msgid ""
"DATETIME is replaced with the date and time I made this changelog entry in "
"RFC2822/RFC5322 format. The easiest way to retrieve this is by running the "
"command ``date -R`` in a terminal."
msgstr ""

#: ../../systemdev/uploading-changes.rst:92
msgid ""
"Note that no line in your changelog entry should exceed 80 characters in "
"length."
msgstr ""

#: ../../systemdev/uploading-changes.rst:94
msgid "With that, my new changelog entry follows::"
msgstr ""

#: ../../systemdev/uploading-changes.rst:104
msgid ""
"Add your new changelog entry to the top of the ``debian/changelog`` file and "
"commit it with the message \"Update changelog\". Push your changes. Now "
"you're ready to make your Pull Request!"
msgstr ""

#: ../../systemdev/uploading-changes.rst:107
msgid "Create your pull request"
msgstr ""

#: ../../systemdev/uploading-changes.rst:109
msgid ""
"A pull request asks UBports maintainers to review your code changes and add "
"them to the official repository. We'll create one now."
msgstr ""

#: ../../systemdev/uploading-changes.rst:111
msgid ""
"Open your fork of the repository on GitHub. Navigate to the branch that you "
"just pushed to using the \"Branch\" selector:"
msgstr ""

#: ../../systemdev/uploading-changes.rst:-1
msgid "Using the branch selector on GitHub"
msgstr ""

#: ../../systemdev/uploading-changes.rst:117
msgid ""
"Once you've opened your desired branch, click the \"New pull request\" "
"button to start your pull request. You'll be taken to a page where you can "
"review your changes and create a pull request."
msgstr ""

#: ../../systemdev/uploading-changes.rst:119
msgid ""
"Give your pull request a descriptive title and description (include links to "
"reference bugs or other material). Ensure that the \"base\" branch is the "
"one you want your changes to be applied to (likely ``xenial``), then click "
"\"Create pull request\"."
msgstr ""

#: ../../systemdev/uploading-changes.rst:121
msgid ""
"With your pull request created, we can move on to testing your changes using "
"the UBports build service!"
msgstr ""

#: ../../systemdev/uploading-changes.rst:124
msgid "Test your changes"
msgstr ""

#: ../../systemdev/uploading-changes.rst:126
msgid ""
"Once your pull request is built (a green check mark appears next to your "
"last commit), you are ready to test your changes on your device."
msgstr ""

#: ../../systemdev/uploading-changes.rst:130
msgid ""
"If a red \"X\" appears next to your last commit, your pull request has "
"failed to build. Click the red \"X\" to view the build log. Until your build "
"errors are resolved, your pull request cannot be installed or accepted."
msgstr ""

#: ../../systemdev/uploading-changes.rst:132
msgid ""
"We'll use ``ubports-qa`` to install your changes. Take note of your pull "
"request's ID (noted as ``#number`` after the title of the pull request) and "
"follow these steps to install your changes:"
msgstr ""

#: ../../systemdev/uploading-changes.rst:134
msgid ""
"Ensure your device is running the newest version of Ubuntu Touch from the "
"``devel`` channel."
msgstr ""

#: ../../systemdev/uploading-changes.rst:135
msgid ""
"Get shell access to your device using :doc:`/userguide/advanceduse/adb` or :"
"doc:`/userguide/advanceduse/ssh`."
msgstr ""

#: ../../systemdev/uploading-changes.rst:136
msgid ""
"Run ``sudo ubports-qa install REPOSITORY PR``, replacing ``REPOSITORY`` with "
"the name of the repository you have submitted a PR to and ``PR`` with the "
"number of your pull request without the ``#``. For example run ``sudo "
"ubports-qa morph-browser 123`` to install the PR number 123 to morph-browser "
"repo."
msgstr ""

#: ../../systemdev/uploading-changes.rst:138
msgid ""
"``ubports-qa`` will automatically add the repository containing your changed "
"software and start the installation for you. All you will need to do is "
"check the packages it asks you to install and say \"yes\" if they are "
"correct."
msgstr ""

#: ../../systemdev/uploading-changes.rst:140
msgid ""
"If ``ubports-qa`` fails to install your packages, run it again with the ``-"
"v`` flag (for example, ``ubports-qa -v install ...``). If it still fails, "
"submit the entire log (starting from the ``$`` before the ``ubports-qa`` "
"command) to `Ubuntu Pastebin <https://paste.ubuntu.com/>`_ and contact us "
"for help."
msgstr ""

#: ../../systemdev/uploading-changes.rst:142
msgid ""
"Once ``ubports-qa`` is finished, test your changes to ensure they have fixed "
"the original bug. Add the ``ubports-qa`` command to your pull request, then "
"send the link to the pull request to other developers and testers so they "
"may also test your changes."
msgstr ""

#: ../../systemdev/uploading-changes.rst:144
msgid ""
"When getting feedback from your testers, be sure to add the information to "
"the pull request (or ask them to do it for you) so that everyone is updated "
"on the status of your code."
msgstr ""

#: ../../systemdev/uploading-changes.rst:146
msgid ""
"Every time you make a change and push it to GitHub, it will trigger a new "
"build. You can run ``sudo ubports-qa update`` to get the freshest changes "
"every time this happens."
msgstr ""

#: ../../systemdev/uploading-changes.rst:149
msgid "Celebrate!"
msgstr ""

#: ../../systemdev/uploading-changes.rst:151
msgid ""
"If you and your testers are satisfied with the results of your pull request, "
"it will be merged. Following the merge, the UBports build service will build "
"your code and deploy it to Ubuntu Touch users worldwide."
msgstr ""

#: ../../systemdev/uploading-changes.rst:153
msgid "Thank you for your contribution to Ubuntu Touch!"
msgstr ""
