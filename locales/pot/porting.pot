# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, The UBports project (Creative Commons BY-SA 4.0)
# This file is distributed under the same license as the UBports package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: UBports \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-12-07 11:45-0600\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../porting/build_and_boot/Boot_debug.rst:4
msgid "Booting"
msgstr ""

#: ../../porting/build_and_boot/Boot_debug.rst:6
msgid "In the previous sections you completed building and installing Ubuntu Touch on your device. The next step is to boot the device, gain remote access and debug as necessary."
msgstr ""

#: ../../porting/build_and_boot/Boot_debug.rst:9
msgid "What is a successful boot?"
msgstr ""

#: ../../porting/build_and_boot/Boot_debug.rst:11
msgid "When you boot your build for the first time you will normally not get anything on the screen. This is not necessarily an indication of something gone wrong. Your system may well have booted successfully and this can be ascertained by gaining remote access."
msgstr ""

#: ../../porting/build_and_boot/Boot_debug.rst:13
msgid "If your system booted successfully, you will be able to connect to your device from your host using ssh and continue debugging and configuring from there."
msgstr ""

#: ../../porting/build_and_boot/Boot_debug.rst:15
msgid "If something went wrong, you should normally be offered a telnet connection through which you can proceed with debugging. If you don't get either of these, the problem might be more difficult to determine. If you get stuck don't hesitate to seek help."
msgstr ""

#: ../../porting/build_and_boot/Boot_debug.rst:18
msgid "Gaining remote access"
msgstr ""

#: ../../porting/build_and_boot/Boot_debug.rst:20
msgid "When your device boots it will likely stay at the bootloader screen. However, you should also get a new network connection on the computer you have it plugged in to. To determine if this is the case, and what type of connection you have been offered, proceed as described below."
msgstr ""

#: ../../porting/build_and_boot/Boot_debug.rst:23
msgid "ssh connection"
msgstr ""

#: ../../porting/build_and_boot/Boot_debug.rst:25
msgid "To confirm that your device has booted correctly, on your host computer, run dmesg -w and watch for “GNU/Linux device” in the output. This confirms that you can establish an ssh connection to the device (see below). If you instead get something similar to “Halium initrd Failed to boot”, skip to :ref:`telnet`."
msgstr ""

#: ../../porting/build_and_boot/Boot_debug.rst:27
msgid "Establish an ssh connection to your device as follows:"
msgstr ""

#: ../../porting/build_and_boot/Boot_debug.rst:29
msgid "Your computer should now have a newly connected RNDIS interface. Check the output of ``ip link show`` for the device name. The device name will most likely resemble ``enp0s29u1u1``. Assign this device a fake MAC address (if the default one is all 00s) and an IP of 10.15.19.100::"
msgstr ""

#: ../../porting/build_and_boot/Boot_debug.rst:35
msgid "Once finished, you should be able to login with the following::"
msgstr ""

#: ../../porting/build_and_boot/Boot_debug.rst:39
msgid "The password will be the one you set when you ran the halium-install script."
msgstr ""

#: ../../porting/build_and_boot/Boot_debug.rst:44
msgid "telnet connection"
msgstr ""

#: ../../porting/build_and_boot/Boot_debug.rst:46
msgid "If you have been offered a telnet connection the rootfs and system image have likely not been found and mounted at boot time. This may indicate that one or more partitions have not been mounted as they should. Connect to your device with the following command::"
msgstr ""

#: ../../porting/build_and_boot/Boot_debug.rst:50
msgid "From here you can start debugging to find out what went wrong. Please :ref:`seek help <Getting-community-help>` to find out how to proceed."
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:2
msgid "Halium-7.1 - Building"
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:4
msgid "For Halium-7.1 porting it is necessary to build both halium-boot.img and system.img."
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:7
#: ../../porting/build_and_boot/H9_build.rst:10
msgid "Initializing the build environment"
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:9
msgid "First you need to initialize the environment using the envsetup.sh tool included in your source tree. Enter your BUILDDIR and issue the command::"
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:13
msgid "The output will look like this::"
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:21
msgid "The ``breakfast`` command is used to set up the build environment for a specific device. From the root of your BUILDDIR run the following, replacing [CODENAME] with your device's specific codename::"
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:25
#: ../../porting/build_and_boot/H9_build.rst:28
msgid "Breakfast will attempt to find your device, set up all of the environment variables needed for building, and give you a summary at the end."
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:30
#: ../../porting/build_and_boot/H9_build.rst:33
msgid "Modify the kernel configuration"
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:32
#: ../../porting/build_and_boot/H9_build.rst:35
msgid "The default LineageOS/Halium kernel configuration file needs modifications as Ubuntu Touch requires a slightly different kernel config than Halium, including enabling Apparmor. A script that does this job is provided in your Halium source tree: ``BUILDDIR/halium/halium-boot/check-kernel-config``."
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:34
#: ../../porting/build_and_boot/H9_build.rst:37
msgid "Locate your configuration file. It should be at ``arch/arm/configs/<CONFIG>`` or ``arch/arm64/configs/<CONFIG>`` depending on the architecture of your device. If you have trouble finding it, run ``grep \"TARGET_KERNEL_CONFIG\" device/<VENDOR>/<CODENAME>/BoardConfig.mk`` to determine the location."
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:36
msgid "Then, from the root of your BUILDDIR, run::"
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:40
#: ../../porting/build_and_boot/H9_build.rst:43
msgid "You may have to do this twice. It will likely fix things both times. Then, run the script without the ``-w`` flag to see if there are any more errors. If there are, fix them manually. Once finished, run the script without the ``-w`` flag one more time to make sure everything is correct."
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:43
msgid "Halium-7.1 based Ubuntu Touch requires setting console=tty0"
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:45
msgid "The halium-boot initramfs expects ``/dev/console`` to be a console device and will not start init if it is not available. This is commonly the case on recent devices, because they either have UART disabled or ``console=`` is not specified (null) by default. This can be fixed by supplying ``console=tty0`` as the last argument in the kernel cmdline. To achieve this, proceed as follows:"
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:47
msgid "It should be done in the makefile named ``BoardConfig.mk`` (or ``BoardConfigCommon.mk``) located in the root directory of your device tree, e.g. ``~/halium/device/<vendor>/<model_codename>/BoardConfig.mk``"
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:49
msgid "Add the following line::"
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:53
msgid "If your makefile already includes a line beginning with ``BOARD_KERNEL_CMDLINE``, you may add it just below that to keep things tidy."
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:56
msgid "The above method, although the preferred one, may not work for some Samsung devices. The result will be that you cannot get access to the device through ssh after boot, and Unity 8 will not be able to start. If you run into this problem, you can specify the setting in your device's kernel config file instead. Add the following lines::"
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:62
msgid "In rare cases the bootloader overwrites the kernel command line argument, rendering the setting above useless. This is the case for the Google Pixel 3a (sargo). To deal with this issue, replicate `this commit <https://github.com/fredldotme/android_kernel_google_bonito/commit/d0741dded3907f2cf4ecdc02bfcb74fc252763ff>`_."
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:65
#: ../../porting/build_and_boot/H9_build.rst:46
msgid "Build"
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:67
msgid "Halium will use the mkbootimg tool for creating the boot image. In most cases it is not on the local harddisk, so it can be built by issuing::"
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:71
#: ../../porting/build_and_boot/H9_build.rst:52
msgid "Now build the ``halium-boot.img`` using the commands::"
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:78
#: ../../porting/build_and_boot/H9_build.rst:59
msgid "If you prefer ``make`` instead of ``mka`` you should set ``-j[num]`` for parallel building, which reduces build time. Replace ``[num]`` with the number of threads in your system plus 2."
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:81
#: ../../porting/build_and_boot/H9_build.rst:62
msgid "Build errors"
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:83
#: ../../porting/build_and_boot/H9_build.rst:64
msgid "There are a number of known build errors which you might encounter, depending first of all upon how rigorous you have been in following the steps outlined, but you may also run into unforeseen issues. If your build fails at first, make sure you have done exactly as described, then go through the list of `known errors in the Halium guide <https://docs.halium.org/en/latest/porting/common-kernel-build-errors.html#common-kernel-build-errors>`_."
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:85
#: ../../porting/build_and_boot/H9_build.rst:66
msgid "I your particular error is not listed, you will need to do some research of your own. If you end up here, know that there is a community of porters, developers and enthusiasts who might be able to help you. Refer to :ref:`Getting-community-help`."
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:90
#: ../../porting/build_and_boot/H9_build.rst:71
msgid "Building the system image (system.img)"
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:92
msgid "Once you have successfully built halium-boot.img you can proceed to directly to building system.img::"
msgstr ""

#: ../../porting/build_and_boot/H7_build.rst:96
msgid "Likelier than not, you will run into one or more errors along the way when building the system image. A number of possible errors are documented in `the Halium guide <https://docs.halium.org/en/latest/porting/common-system-build-errors.html#common-system-build-errors>`_. If yours is not listed, :ref:`seek community help <Getting-community-help>`."
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:2
msgid "Halium-7.1 - Setting up the sources"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:4
msgid "The sources necessary for the **full system image build** for Halium-7.1. Halium 7 requires a **full system image build**."
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:7
msgid "Setting up the sources for Halium-7.1 builds"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:9
#: ../../porting/build_and_boot/H9_setup_sources.rst:7
msgid "Create a directory for your Halium source tree::"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:13
#: ../../porting/build_and_boot/H9_setup_sources.rst:11
msgid "This directory will be referred to as BUILDDIR throughout the remainder of this guide."
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:15
msgid "First, initialize your source to the correct version of Halium::"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:19
msgid "Then download the code by issuing the command::"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:23
#: ../../porting/build_and_boot/H9_setup_sources.rst:23
msgid "The download will take some time as it counts several gigabytes. If you have a fast internet connection, you may set an extra JOBS=[number] environment variable at the beginning of the command to open more parallel downloading jobs. Generally, 12 is recommended, which is the default. When it completes, your BUILDDIR will contain a copy of the Halium source tree, but important parts are still missing."
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:26
#: ../../porting/build_and_boot/H9_setup_sources.rst:26
msgid "Adding your device-specific source"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:28
#: ../../porting/build_and_boot/H9_setup_sources.rst:28
msgid "The next step is to add the device-specific sources that need to be integrated into the source tree before you can attempt to build. The missing sources are those required to build the kernel as well as a host of other hardware-specific components of the port."
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:30
#: ../../porting/build_and_boot/H9_setup_sources.rst:30
msgid "The necessary sources need to be located and specified by creating a device manifest file (or editing an existing one) in the directory ``BUILDDIR/halium/devices/manifests``."
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:33
#: ../../porting/build_and_boot/H9_setup_sources.rst:33
msgid "A correct device manifest is crucial to the success of your port."
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:36
#: ../../porting/build_and_boot/H9_setup_sources.rst:36
msgid "Locating the sources"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:38
#: ../../porting/build_and_boot/H9_setup_sources.rst:38
msgid "Locate your device repository on `LineageOS’s GitHub organization <https://github.com/LineageOS>`_. This is done by typing your device’s codename into the search box. The device repository follows the naming convention: android_device_[manufacturer]_[device]. Make a note of this name."
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:40
#: ../../porting/build_and_boot/H9_setup_sources.rst:40
msgid "Open the device repository on Github. It will contain a ``lineage.dependencies`` (or ``cm.dependencies``) file which specifies all other repositories that your device is reliant upon."
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:46
#: ../../porting/build_and_boot/H9_setup_sources.rst:46
msgid "Creating the device manifest file"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:48
#: ../../porting/build_and_boot/H9_setup_sources.rst:48
msgid "Now create (or edit) the file ``BUILDDIR/halium/devices/manifests/[manufacturer]_[device].xml``. (The description below presupposes that you are creating the file from scratch.)"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:50
#: ../../porting/build_and_boot/H9_setup_sources.rst:50
msgid "Paste the following into the file::"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:58
#: ../../porting/build_and_boot/H9_setup_sources.rst:58
msgid "The device repository"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:60
msgid "Your sources must now be entered into the manifest. Start with your device repository. Between the <manifest> and </manifest> tags, create the line below, making sure to replace the information inside the square brackets with your own::"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:64
#: ../../porting/build_and_boot/H9_setup_sources.rst:64
msgid "'path' specifies the target path (subdirectory of your BUILDDIR) where the source code from repository 'name', which is found at 'remote', will be placed. The repository may contain a number of branches and it is important to secure the correct branch with 'revision='"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:67
#: ../../porting/build_and_boot/H9_setup_sources.rst:67
msgid "The revision attribute may be omitted if the default revision for this remote is the one that you wish to use."
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:69
msgid "If you are unsure of your remote, refer to :ref:`H7_remotes`."
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:72
#: ../../porting/build_and_boot/H9_setup_sources.rst:72
msgid "Dependencies"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:74
#: ../../porting/build_and_boot/H9_setup_sources.rst:74
msgid "Now create more lines like the previous one, using the ``lineage.dependencies`` (or ``cm.dependencies``) file you found earlier in your device repository. This file lists all the remaining repositories needed to build for your selected device. Create one line for each entry in this file, using the following template::"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:78
msgid "The target path is found in the repository’s name. The preceding “android” or “proprietary” is omitted and underscores are replaced with slashes. For example, ``android_device_lge_bullhead`` goes in ``device/lge/bullhead``."
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:81
#: ../../porting/build_and_boot/H9_setup_sources.rst:81
msgid "Vendor blobs"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:83
msgid "Vendor blobs go in the ``vendor/`` folder of your ``BUILDDIR``."
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:85
#: ../../porting/build_and_boot/H9_setup_sources.rst:85
msgid "The first place to search for your device’s vendor blobs is in `'TheMuppets' GitHub organization <https://github.com/TheMuppets>`_. Enter your device’s codename into the search field and see if you get a match. If you are unable to find your device in TheMuppets, you will need to search elsewhere."
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:87
#: ../../porting/build_and_boot/H9_setup_sources.rst:87
msgid "It may also be possible to extract the vendor blobs from the device itself by following instructions for your device on `the LineageOS wiki <https://wiki.lineageos.org/>`_ as applicable."
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:92
#: ../../porting/build_and_boot/H9_setup_sources.rst:92
msgid "Remotes"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:94
#: ../../porting/build_and_boot/H9_setup_sources.rst:94
msgid "A remote entry specifies the name, location (fetch) prefix, code review server, and default revision (branch/tag) for the source."
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:96
msgid "You can create a remote by adding a remote tag to your manifest as shown in the following example::"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:103
#: ../../porting/build_and_boot/H9_setup_sources.rst:105
msgid "Only the name, fetch, and revision attributes are required. The review attribute specifies a Gerrit Code Review server, which probably won’t be useful for initial porting purposes."
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:105
msgid "For example, let’s say that you have a bunch of repositories at https://github.com/SomeUserName/ and your desired branch name is los-14.1 in each. You would create a remote as follows and place it into your local manifest::"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:111
msgid "There are also some remotes available to you by default, though they differ between Halium versions. The following tables will help you identify these. See more information on these remotes can be found at the top of the file ``BUILDDIR/halium/.repo/manifests/default.xml``."
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:113
msgid "The following remotes are available by default in Halium 7.1:"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:116
#: ../../porting/build_and_boot/H9_setup_sources.rst:118
msgid "Remote Name"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:116
#: ../../porting/build_and_boot/H9_setup_sources.rst:118
msgid "Remote Description, URL"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:118
#: ../../porting/build_and_boot/H9_setup_sources.rst:122
msgid "aosp"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:118
#: ../../porting/build_and_boot/H9_setup_sources.rst:122
msgid "Android Open Source Project, https://android.googlesource.com"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:119
msgid "los"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:119
msgid "LineageOS, http://github.com/LineageOS"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:120
msgid "hal"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:120
msgid "Halium (link to GitHub root for legacy reasons), http://github.com"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:121
msgid "them"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:121
msgid "TheMuppets, http://github.com/TheMuppets"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:122
msgid "them2"
msgstr ""

#: ../../porting/build_and_boot/H7_setup_sources.rst:122
msgid "TheMuppets (for some xiaomi vendor repos) https://gitlab.com/the-muppets"
msgstr ""

#: ../../porting/build_and_boot/H9_build.rst:2
msgid "Halium-9.0 - Building"
msgstr ""

#: ../../porting/build_and_boot/H9_build.rst:4
msgid "When doing a Halium 9.0 port, you first need to build ``halium-boot.img``. This boot image can then either be combined with the GSI, or you can build your own, device-specific ``system.img`` as well."
msgstr ""

#: ../../porting/build_and_boot/H9_build.rst:7
msgid "Building the boot image (halium-boot.img)"
msgstr ""

#: ../../porting/build_and_boot/H9_build.rst:12
msgid "First you need to initialize the environment using the ``envsetup.sh`` tool included in your source tree. Enter your ``BUILDDIR`` and issue the command::"
msgstr ""

#: ../../porting/build_and_boot/H9_build.rst:16
msgid "The output should resemble this::"
msgstr ""

#: ../../porting/build_and_boot/H9_build.rst:24
msgid "The ``breakfast`` command is used to set up the build environment for a specific device. From the root of your ``BUILDDIR`` run the following command, replacing [CODENAME] with your device's specific codename::"
msgstr ""

#: ../../porting/build_and_boot/H9_build.rst:39
msgid "Then, from the root of your ``BUILDDIR``, run::"
msgstr ""

#: ../../porting/build_and_boot/H9_build.rst:48
msgid "Halium will use the ``mkbootimg`` tool for creating the boot image. In most cases it is not on the local harddisk, so it can be built by issuing::"
msgstr ""

#: ../../porting/build_and_boot/H9_build.rst:73
msgid "If you are using the **Halium-boot** method, you can skip this step. If you are following the **Full system image** method, this step is required."
msgstr ""

#: ../../porting/build_and_boot/H9_build.rst:76
msgid "To build the system image::"
msgstr ""

#: ../../porting/build_and_boot/H9_build.rst:80
msgid "It's likely that you will run into one or more errors when building the system image. A number of possible errors and known solutions are documented in `the Halium guide <https://docs.halium.org/en/latest/porting/common-system-build-errors.html#common-system-build-errors>`_. If yours is not listed, :ref:`seek community help <Getting-community-help>`."
msgstr ""

#: ../../porting/build_and_boot/H9_gitlab_build.rst:5
msgid "Halium-9.0 - Standalone kernel method"
msgstr ""

#: ../../porting/build_and_boot/H9_gitlab_build.rst:7
msgid "For some devices, Halium-9.0 (and later) ports can be built based on just the kernel source code."
msgstr ""

#: ../../porting/build_and_boot/H9_gitlab_build.rst:9
msgid "This method makes use of scripts that download and prepare the kernel source, build the boot image and combine this together with other necessary components, thus creating the files needed which can subsequently be flashed to the device."
msgstr ""

#: ../../porting/build_and_boot/H9_gitlab_build.rst:12
#: ../../porting/introduction/Setting_up.rst:4
msgid "Setting up the build environment"
msgstr ""

#: ../../porting/build_and_boot/H9_gitlab_build.rst:14
msgid "Assuming you have already installed the tools specified in the section on :ref:`Setting-up`, there are just a few more to add before your build environment is complete. Run this commmand to add them::"
msgstr ""

#: ../../porting/build_and_boot/H9_gitlab_build.rst:21
msgid "Obtaining kernel source"
msgstr ""

#: ../../porting/build_and_boot/H9_gitlab_build.rst:23
msgid "Locate the kernel source code for your device. Fork this repo to your own Github account so that you can easily make any necessary adjustments as your work progresses. Make a note of the link to your repo. It needs to be specified in a configuration script for the build (see :ref:`Configure`)."
msgstr ""

#: ../../porting/build_and_boot/H9_gitlab_build.rst:26
msgid "Clone a Gitlab CI repo to base your build on"
msgstr ""

#: ../../porting/build_and_boot/H9_gitlab_build.rst:28
msgid "Ideally you should base your build on a previous build for a device with similar platform/SoC. However, if unsure, use `the repo for Xiaomi-violet <https://gitlab.com/ubports/community-ports/android9/xiaomi-redmi-note-7-pro/xiaomi-violet/-/tree/master/>`_"
msgstr ""

#: ../../porting/build_and_boot/H9_gitlab_build.rst:33
msgid "Configure, build and install"
msgstr ""

#: ../../porting/build_and_boot/H9_gitlab_build.rst:35
msgid "Go through the file ``deviceinfo`` and make all necessary adjustments so that it conforms to your device. The first lines should be self-explanatory."
msgstr ""

#: ../../porting/build_and_boot/H9_gitlab_build.rst:37
msgid "To complete the ``deviceinfo_flash_offset_`` lines, you will need to obtain and examine an existing ``boot.img`` for your particular device, e.g. from a LineageOS ROM. Lineage provides `a Python script for reading the information in question. <https://raw.githubusercontent.com/LineageOS/android_system_core/lineage-17.1/mkbootimg/unpack_bootimg.py>`_ Download this script and run it on the boot image you have obtained::"
msgstr ""

#: ../../porting/build_and_boot/H9_gitlab_build.rst:41
msgid "This tool will not supply the base offset, only the others, and it gives the absolute value. In other words, the value returned by the script for the kernel offset is in fact the (base offset + kernel offset). In the same manner, the other values are also the sum of the base offset and the offset value in question. Note that offset values for devices that share the same SoC will be the same."
msgstr ""

#: ../../porting/build_and_boot/H9_gitlab_build.rst:43
msgid "Using this information, you can calculate the correct values for the offsets to be specified in the file ``deviceinfo``. If in doubt, :ref:`seek help <Getting-community-help>`."
msgstr ""

#: ../../porting/build_and_boot/H9_gitlab_build.rst:45
msgid "When you have finished editing ``deviceinfo``, carefully read and follow the instructions `on this page <https://gitlab.com/ubports/community-ports/android9/xiaomi-redmi-note-7-pro/xiaomi-violet/-/blob/master/README.md>`_ to build and install, remembering to replace 'violet' with your device's codename."
msgstr ""

#: ../../porting/build_and_boot/H9_setup_sources.rst:2
msgid "Halium-9.0 - Setting up the sources"
msgstr ""

#: ../../porting/build_and_boot/H9_setup_sources.rst:5
msgid "Initializing and downloading the Halium source"
msgstr ""

#: ../../porting/build_and_boot/H9_setup_sources.rst:13
msgid "First, initialize your source to the correct version of Halium, depending on your device. If in doubt, refer to :ref:`Android-and-Halium-versions`."
msgstr ""

#: ../../porting/build_and_boot/H9_setup_sources.rst:15
msgid "For Halium 9.0::"
msgstr ""

#: ../../porting/build_and_boot/H9_setup_sources.rst:19
msgid "With the Halium tree initialized you are ready to download the code by issuing the command::"
msgstr ""

#: ../../porting/build_and_boot/H9_setup_sources.rst:60
msgid "Your sources must now be entered into the manifest. Start with your device repository. Between the ``<manifest>`` and ``</manifest>`` tags, create the line below, making sure to replace the information inside the square brackets with your own::"
msgstr ""

#: ../../porting/build_and_boot/H9_setup_sources.rst:69
msgid "If you are unsure of your remote, refer to :ref:`H9_remotes`."
msgstr ""

#: ../../porting/build_and_boot/H9_setup_sources.rst:78
msgid "The target path is found in the repository’s name. The preceding “android” or “proprietary” is omitted and underscores are replaced with slashes. For example, android_device_lge_bullhead goes in device/lge/bullhead."
msgstr ""

#: ../../porting/build_and_boot/H9_setup_sources.rst:83
msgid "Vendor blobs go in the vendor/ folder of your BUILDDIR."
msgstr ""

#: ../../porting/build_and_boot/H9_setup_sources.rst:96
msgid "You can create a remote by adding a remote tag to your manifest::"
msgstr ""

#: ../../porting/build_and_boot/H9_setup_sources.rst:103
msgid "(Note: The above is merely an example and cannot be used as such for Halium-9.0)"
msgstr ""

#: ../../porting/build_and_boot/H9_setup_sources.rst:107
msgid "For example, let’s say that you have a bunch of repositories at https://github.com/SomeUserName/ and your desired branch name is los-16.0 in each. You would create a remote as follows and place it into your local manifest::"
msgstr ""

#: ../../porting/build_and_boot/H9_setup_sources.rst:113
msgid "There are also some remotes available to you by default, though they differ between Halium versions. The following tables will help you identify these. See more information on these remotes can be found at the top of the file BUILDDIR/halium/.repo/manifests/default.xml."
msgstr ""

#: ../../porting/build_and_boot/H9_setup_sources.rst:115
msgid "The following remotes are available by default in Halium 9.0:"
msgstr ""

#: ../../porting/build_and_boot/H9_setup_sources.rst:120
msgid "github"
msgstr ""

#: ../../porting/build_and_boot/H9_setup_sources.rst:120
msgid "LineageOS, https://github.com/"
msgstr ""

#: ../../porting/build_and_boot/H9_setup_sources.rst:121
msgid "gitlab"
msgstr ""

#: ../../porting/build_and_boot/H9_setup_sources.rst:121
msgid "Gitlab, https://about.gitlab.com/"
msgstr ""

#: ../../porting/build_and_boot/H9_setup_sources.rst:125
msgid "If you do not specify a remote, aosp is assumed."
msgstr ""

#: ../../porting/build_and_boot/H9_setup_sources.rst:128
msgid "Sync and apply hybris patches"
msgstr ""

#: ../../porting/build_and_boot/H9_setup_sources.rst:130
msgid "With your manifest now complete, go to the root of your ``BUILDDIR`` and issue the following command (replace DEVICE with your device’s codename) to bring the device-specific source code into your source tree::"
msgstr ""

#: ../../porting/build_and_boot/H9_setup_sources.rst:134
msgid "This will first link your manifest from Halium devices to ``.repo/local_manifests/device.xml`` and then sync all repositories."
msgstr ""

#: ../../porting/build_and_boot/H9_setup_sources.rst:136
msgid "Once complete you can now run a script to apply hybris patches. These are mainly used for building the system image and can be omitted if your goal is to only build ``halium-boot.img``. However, if you run into build errors, it might be worthwhile to try applying these patches all the same."
msgstr ""

#: ../../porting/build_and_boot/H9_setup_sources.rst:138
msgid "From the root of your BUILDDIR, run the following command::"
msgstr ""

#: ../../porting/build_and_boot/H9_setup_sources.rst:143
msgid "Document"
msgstr ""

#: ../../porting/build_and_boot/H9_setup_sources.rst:145
msgid "After completing the relevant steps above (according to your chosen, create a pull request containing your device manifest on the Halium devices repository. Also, create a device page on the UBports page under devices. You should link the manifest on Halium devices in your UBports device page."
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:2
msgid "Installing Halium-based builds"
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:4
msgid "With the necessary compontents built, you are now ready to install them on your device and check whether they function as intended. There are only minor differences between Halium versions when it comes to the installation process. In all cases, the system image and rootfs are installed together on the userdata partition of the device. This is done for practical reasons, as it makes the installation process simpler to manage during the first phases of the porting process. Once the port reaches the level of maturity required for it to be offered through the UBports installer (see :ref:`Finalize`), this must be changed in order to reserve a maximum of possible space for userdata."
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:6
msgid "In brief:"
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:8
msgid "**Halium-7.1** requires installing the boot image and system image you have built, together with the UBports rootfs, which you need to download."
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:9
msgid "**Halium-9.0 and newer** require installing the boot image you have built together with the GSI and the UBports rootfs. Both the GSI and the rootfs are available for download. Note: If you chose to build your own system.img, then you must use this instead of the GSI when installing."
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:11
msgid "In order to install Ubuntu Touch, you need a recovery image with Busybox, such as TWRP, installed on your phone. If you have not done so yet, refer to section :ref:`Install-TWRP-recovery` and install it now."
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:13
msgid "You will also need to ensure the ``/data`` partition is formatted with ``ext4`` and is not encrypted. Boot into recovery, check and adjust as necessary."
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:18
msgid "Flashing halium-boot.img"
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:20
msgid "To install halium-boot, reboot your phone into fastboot mode. Then do the following from the root of your ``BUILDDIR``::"
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:25
msgid "If you have trouble accessing your device in fastboot mode, but are able to access it in TWRP recovery mode using adb, then boot into recovery mode and try the following alternative method::"
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:30
msgid "On your device, choose *Install* in the TWRP menu, navigate to the ``/tmp`` directory, choose *Image*, select your image file, select *Boot* and swipe to flash."
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:33
msgid "Samsung devices: Flashing halium-boot.img on Samsung devices is done using the Heimdall flashing utility (on Linux) or the Odin utility (on Windows) after first bringing the device into 'download mode'. See more information on these utilities `here <http://docs.halium.org/en/latest/porting/install-build/reference-rootfs.html#install-hybris-boot-img-on-samsung-devices>`_. Follow the instructions for the utility you choose, including the specific flashing command for flashing the boot partition. Install system.img and rootfs (below) with the device in recovery mode."
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:38
msgid "Installing system image and rootfs"
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:40
msgid "**Read carefully** and perform only the steps which apply to your Halium version and the files you will be flashing!"
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:43
msgid "Download the appropriate rootfs"
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:45
msgid "Start by downloading the appropriate rootfs for your device. You need a rootfs corresponding to your device's architecture and the Halium version you have built. At the moment there are two available versions for Halium 7.1, an armhf (32 bit) version and an arm64 (64 bit) version. For Halium 9.0 there is only an arm64 rootfs available. Follow the appropriate link below to download the one you need."
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:47
msgid "Halium 7.1, armhf (32 bit): `ubports-touch.rootfs-xenial-armhf.tar.gz <https://ci.ubports.com/job/xenial-rootfs-armhf/>`_"
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:48
msgid "Halium 7.1, arm64 (64 bit): `ubuntu-touch-hybris-xenial-arm64-rootfs.tar.gz <https://ci.ubports.com/job/xenial-hybris-rootfs-arm64/>`_"
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:49
msgid "Halium 9.0, armhf (32 bit): `ubuntu-touch-android9-armhf.tar.gz <https://ci.ubports.com/job/xenial-hybris-android9-rootfs-armhf/>`_"
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:50
msgid "Halium 9.0, arm64 (64 bit): `ubuntu-touch-android9-arm64.tar.gz <https://ci.ubports.com/job/xenial-hybris-android9-rootfs-arm64/>`_"
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:53
msgid "Halium-9.0: Download the GSI"
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:55
msgid "If you have built your own system.img, skip to the next step."
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:57
msgid "Download `the Halium 9 LXC container image (GSI) <https://ci.ubports.com/job/UBportsCommunityPortsJenkinsCI/job/ubports%252Fcommunity-ports%252Fjenkins-ci%252Fgeneric_arm64/job/main/>`_."
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:59
msgid "Extract the downloaded file and locate the file ``android-rootfs.img`` in the directory ``system/var/lib/lxc/android``. This is the GSI file you will be transferring to the device."
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:62
msgid "Download the halium-install script"
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:64
msgid "Clone or download the `halium-install repository <https://gitlab.com/JBBgameich/halium-install>`_. This repository contains tools that can be used to install a Halium system image and distribution rootfs. Reboot your device to recovery (e.g. TWRP), to get adb access again. Now use the ``halium-install`` script to install Ubuntu Touch on your device."
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:68
msgid "Perform the installation"
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:70
msgid "For **Halium 7.1 ports** use the following command::"
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:74
msgid "For **Halium 9.0 ports**, use this command::"
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:78
msgid "where [SYSTEM_IMAGE] will be the file ``android-rootfs.img`` you downloaded and extracted, or alternatively the file ``system.img`` you built yourself."
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:80
msgid "The script will copy and extract the files to their proper places, then allow you to set the user password for your device (the *phablet* user's password)."
msgstr ""

#: ../../porting/build_and_boot/Halium_install.rst:83
msgid "halium-install might fail due to unconfigured bintfmt-support for qemu throwing errors such as 'chroot: failed to run command ‘passwd’: Exec format error'.    To fix this, ``/proc/sys/fs/binfmt_misc/register`` should be updated. `binfmt-manager <https://github.com/mikkeloscar/binfmt-manager>`_ by `@mikkeloscar <https://github.com/mikkeloscar/>`_ can provide quickfix."
msgstr ""

#: ../../porting/build_and_boot/index.rst:2
msgid "Building and booting"
msgstr ""

#: ../../porting/build_and_boot/index.rst:4
msgid "Now it's time to download and configure the necessary source code. Then we'll build it and get it to boot. Firstly follow the **Building** steps for your Halium version and porting method. Secondly, proceed with the final **Install and boot** section."
msgstr ""

#: ../../porting/build_and_boot/index.rst:11
msgid "Building"
msgstr ""

#: ../../porting/build_and_boot/index.rst:14
msgid "Full system image method or Halium-boot method"
msgstr ""

#: ../../porting/build_and_boot/index.rst:16
msgid "If you are using either of the **Full system image** method (for Halium 7.1 or 9.0), or the **Halium-boot** method (for Halium 9.0), then please pick the two steps below matching your Halium version."
msgstr ""

#: ../../porting/build_and_boot/index.rst:29
#: ../../porting/introduction/Intro.rst:88
msgid "Standalone kernel method"
msgstr ""

#: ../../porting/build_and_boot/index.rst:31
msgid "If you are using the **Standalone kernel** method, then please pick the step below."
msgstr ""

#: ../../porting/build_and_boot/index.rst:39
msgid "Install and boot"
msgstr ""

#: ../../porting/build_and_boot/index.rst:41
msgid "Afterwards, proceed with these steps for any porting method."
msgstr ""

#: ../../porting/configure_test_fix/Apparmor.rst:5
msgid "AppArmor"
msgstr ""

#: ../../porting/configure_test_fix/Apparmor.rst:7
msgid "Without AppArmor a number of device features will not function properly and most apps will crash when launched. For more information on AppArmor, refer to the `Ubuntu Wiki. <https://wiki.ubuntu.com/AppArmor>`_"
msgstr ""

#: ../../porting/configure_test_fix/Apparmor.rst:9
msgid "AppArmor is added through a combination of integrating the necessary code into the kernel source tree and setting necessary kernel configuration. The process is slightly different on Halium-7.1, compared to newer Halium versions."
msgstr ""

#: ../../porting/configure_test_fix/Apparmor.rst:12
msgid "AppArmor for Halium-7.1 ports"
msgstr ""

#: ../../porting/configure_test_fix/Apparmor.rst:14
msgid "Start by downloading the backported `AppArmor patch <https://github.com/ubports/AppArmor-backports-ut>`_ corresponding to your device's kernel version. Your kernel version is specified at the beginning of your kernel defconfig file, i.e. the one you edited in section :ref:`H7_edit-kernel-config` above. (For more information on backporting, see the :ref:`bluetooth <Bluetooth>` section below.)"
msgstr ""

#: ../../porting/configure_test_fix/Apparmor.rst:16
msgid "You now need to delete your entire BUILDDIR/kernel/VENDOR/MODEL/security/apparmor subdirectory and replace it with the one you downloaded. Then rebuild ``halium-boot.img``."
msgstr ""

#: ../../porting/configure_test_fix/Apparmor.rst:18
msgid "If you get errors when building, resolve them one at a time, modifying your source code as needed. Note that you should only modify the code in the AppArmor subdirectory if at all possible. Modifying code elsewhere will more than likely just compound your problems."
msgstr ""

#: ../../porting/configure_test_fix/Apparmor.rst:20
msgid "Seek help as needed from one of the sources mentioned in the subsection on :ref:`getting community help <Getting-community-help>`."
msgstr ""

#: ../../porting/configure_test_fix/Apparmor.rst:22
msgid "Once you have successfully rebuilt ``halium-boot.img``, flash it to your device. If keyboard vibration works, this is a good indication that AppArmor has been successfully applied. Also, check if apps launch normally."
msgstr ""

#: ../../porting/configure_test_fix/Apparmor.rst:25
msgid "AppArmor for Halium-9.0 ports"
msgstr ""

#: ../../porting/configure_test_fix/Apparmor.rst:27
msgid "When doing Halium-9.0 (and later) ports, it is generally sufficient to cherry pick certain commits to the kernel source rather than replacing the whole ``apparmor`` directory in the kernel source tree. Follow the link below which corresponds to your device's kernel version and select the most recent block of commits (i.e. all the commits that were added on the same and most recent date):"
msgstr ""

#: ../../porting/configure_test_fix/Apparmor.rst:29
msgid "`3.18 AppArmor patches <https://github.com/MotoZ-2016/android_kernel_motorola_msm8996/commits/halium-9.0/security/apparmor>`_"
msgstr ""

#: ../../porting/configure_test_fix/Apparmor.rst:30
msgid "`4.4 AppArmor patches <https://github.com/moto-SDM660/android_kernel_motorola_sdm660/commits/halium-9.0/security/apparmor>`_"
msgstr ""

#: ../../porting/configure_test_fix/Apparmor.rst:31
msgid "`4.9 AppArmor patches <https://github.com/erfanoabdi/android_kernel_motorola_sdm632/commits/halium-9.0/security/apparmor>`_"
msgstr ""

#: ../../porting/configure_test_fix/Apparmor.rst:32
msgid "`4.14 AppArmor patches <https://github.com/kdrag0n/proton_zf6/commits/halium/security/apparmor>`_"
msgstr ""

#: ../../porting/configure_test_fix/Apparmor.rst:34
msgid "Make sure your kernel defconfig has the setting::"
msgstr ""

#: ../../porting/configure_test_fix/Apparmor.rst:38
msgid "Now rebuild the boot image following your chosen build method, and flash it onto your device. Check if keyboard vibration works. This is a good indication that AppArmor has been successfully applied. Also, check if apps launch normally."
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:4
msgid "Bluetooth"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:6
msgid "Halium-7.1 porting to devices with kernels predating 4.2 will or may require backporting drivers from a newer kernel version, whereas Halium-9.0 based ports can skip this step."
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:9
msgid "Bluetooth backporting to older kernel versions"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:11
msgid "When porting to devices running older kernel versions (mainly version 3.x found in Android 7/ Halium-7.1 devices), it is necessary to replace the kernel bluetooth stack with a newer one. This is because the newer bluetooth hardware in today's bluetooth peripheral devices often has trouble talking to the older bluetooth drivers. This can be fixed by bringing in driver code from newer Linux kernel versions. The process is called *backporting*."
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:15
msgid "Backporting has been greatly facilitated by the `Linux Backports Project <https://backports.wiki.kernel.org/index.php/Main_Page>`_ which has existed for some time. This project is aimed at mainline Linux kernels and the tools (scripts) therein are not specifically tailored to Ubuntu Touch. They will consequently abort at some point during the process. However, they are the best option available, and can provide significant help all the same. The method below is based on the use of a version of these scripts which has been specially prepared by Canonical."
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:19
msgid "Although there are `other kernel versions besides v4.2 available <https://www.kernel.org/>`_, the backports script is specifically tailored to backporting from version 4.2 and thus effectively limits you to this option."
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:22
msgid "Bluetooth backporting steps"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:24
msgid "The steps are as follows:"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:26
#: ../../porting/configure_test_fix/Bluetooth.rst:40
msgid "Record bluetooth driver and settings"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:27
#: ../../porting/configure_test_fix/Bluetooth.rst:67
msgid "Download backports script"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:28
msgid "Download 4.2 kernel source"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:29
#: ../../porting/configure_test_fix/Bluetooth.rst:88
msgid "Run backports script and fix errors"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:30
#: ../../porting/configure_test_fix/Bluetooth.rst:97
msgid "Apply security patch"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:31
#: ../../porting/configure_test_fix/Bluetooth.rst:102
msgid "Apply new settings"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:32
#: ../../porting/configure_test_fix/Bluetooth.rst:175
msgid "Build and flash halium-boot.img"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:33
#: ../../porting/configure_test_fix/Bluetooth.rst:219
msgid "Build and flash system.img"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:35
msgid "These steps will bring in bluetooth driver source from the mainline 4.2 kernel and place it in a directory named ``backports`` in your device's kernel source tree. It will also modify Makefiles and Kconfigs as necessary, thereby disabling the original ``drivers/bluetooth`` directory of your kernel source. The mainline kernel may not contain all bluetooth drivers required for the device being ported. For this reason it is important to make sure to first record all necessary drivers, as any ones missing in the mainline kernel will have to be migrated from their original location (``drivers/bluetooth``) into the ``backports/drivers/bluetooth`` directory as described :ref:`later in this section <Missing-drivers>` before rebuilding halium-boot.img."
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:42
msgid "By the time you reach this point in the porting process, you will have completed building halium-boot (probably a number of times). Your kernel defconfig will contain bluetooth settings including one that designates the driver used by your device. These must be recorded before proceeding."
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:44
msgid "The experienced developer will likely be able to determine the relevant settings manually by searching through the defconfig file. Many of them will appear next to each other in one place in the file. Some may be spread elsewhere making them difficult to locate. When searching manually, help can be found by consulting the `Kconfig` files in relevant subdirectories of your kernel source tree."
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:46
msgid "If you do not have extensive experience, use the ``menuconfig`` tool instead, taking care to use it ONLY for reference, *i.e.* without making any changes."
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:50
msgid "Modifications done with ``menuconfig`` will not affect your kernel defconfig file, but may still corrupt your build."
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:52
msgid "After completing a build of halium-boot.img::"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:57
msgid "(If your device is armhf, use ``ARCH=arm`` instead.)"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:59
msgid "Navigate to the bluetooth drivers submenu and note down all activated settings and what they do. Also note which other settings they depend on (found under Help)."
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:62
msgid "Example:"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:64
msgid "For the Samsung Galaxy S7 (herolte) the original defconfig file contains a number of CONFIG_BT settings, none of which actually designate the bluetooth driver used by this device. The setting for the driver itself is CONFIG_BCM4359=y. This was not one of the drivers brought in by the backporting steps below. It therefore had to be :ref:`added afterwards <Missing-drivers>`."
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:69
msgid "Clone the backports scripts into a directory outside your halium source tree by issuing this command from your home (~) directory::"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:73
msgid "This downloads the backports scripts prepared by Canonical based on the `Backports Project <https://backports.wiki.kernel.org/index.php/Main_Page>`_ mentioned above, and places them in the directory ``~/backport-scripts``. The scripts are specifically written to backport from kernel version 4.2."
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:76
msgid "Download 4.2 kernel sources"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:78
msgid "Create a directory (outside your halium source tree) for the kernel source from which you will pull the newer drivers::"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:82
msgid "Now clone the kernel source for v4.2::"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:90
msgid "Navigate to your backports scripts directory and issue the command below (using Python2 as shown)::"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:94
msgid "It is to be expected that there are errors during this step. You will then have to determine the cause, fix it and retry. The last error message concerns the Makefile and includes info about having generated a file named ``Makefile.rej``, this means you will find information in this file about changes that did not complete successfully, but which you can apply yourself. These need to be completed before proceeding with the build."
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:99
msgid "An additional `generic security patch <https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/patch/?id=8a7b081660857a80c3efc463b3da790c4fa0c801>`_ needs to be applied."
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:104
msgid "Your kernel config file (defconfig) needs to be modified in order for the backported driver and protocol code to be activated."
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:106
msgid "Start by locating all lines beginning with ``CONFIG_BT_`` and move these to the end of the file. Collecting them there makes the subsequent steps somewhat easier by helping to keep track of the changes you make."
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:108
msgid "Next, deactivate all that are activated, *i.e.* do not have a leading ``#``, by inserting this leading ``#``. At the same time, for each one, add a corresponding one beginning with ``CONFIG_BACKPORT_BT_``, *e.g.*::"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:112
msgid "becomes::"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:116
msgid "and then insert the corresponding line for backports::"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:120
msgid "Now add these settings::"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:138
msgid "At this point, check for any remaining settings you :ref:`recorded from your original defconfig <BT-driver>`, which were dependent upon ``CONFIG_BT=y`` and have not been replaced by a corresponding ``CONFIG_BACKPORT_BT_XXXX=y`` setting, making sure not to forget your device's bluetooth driver. Such settings will no longer have any effect and must be pulled into the build in the following manner:"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:140
msgid "The corresponding source file(s) will have to be migrated from their original location to the corresponding location under ``backports/drivers/bluetooth/``. The files ``Makefile`` and ``Kconfig`` need to be edited to include this missing setting or else they will not be built. Check the corresponding files in the original location for the necessary settings."
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:142
msgid "Once the above is complete, add the following lines and edit as necessary, following the directions below::"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:170
msgid "As an example, the lines above have been edited to conform with backporting from kernel 4.2 to a device with kernel version 3.18. For devices running lower kernel versions enable each line specifying a version above the device's kernel version by removing the leading ``#`` on these lines."
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:172
msgid "You are now ready to build."
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:177
msgid "Return to the root of your BUILDDIR and build::"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:181
msgid "Build errors may occur and will vary depending on device. Handle them one at a time, :ref:`seeking help <Getting-community-help>` as necessary."
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:183
msgid "After building and flashing halium-boot, check the output of ``dmesg`` on the device to see that bluetooth has been enabled::"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:187
msgid "Your output should resemble the following (from the Samsung Galaxy S7)::"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:214
msgid "If you do not get similar output, something has gone wrong. Check that you completed all steps above as described and seek help as needed."
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:216
msgid "You have now rebuilt your halium-boot.img to include updated bluetooth drivers and only one final step remains."
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:221
msgid "The system image needs to be rebuilt with a configuration script for bluetooth adapted to your device. On the completed build, this file is located at::"
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:225
msgid "`An example script can be found here <https://github.com/Flohack74/android_device_huawei_angler/blob/halium-7.1/ubuntu/bluetooth/bluetooth-touch-android.conf>`_. Make sure to adapt as necessary."
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:227
msgid "Place this script in your ``device/[VENDOR]/[DEVICE]/ubuntu`` directory and inject it using the :ref:`overlay file method <Overlay>`."
msgstr ""

#: ../../porting/configure_test_fix/Bluetooth.rst:229
msgid "Rebuild and flash your ``system.img``."
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:4
msgid "Display settings"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:6
msgid "There are two variables that set the content scaling for Lomiri and Ubuntu Touch applications: ``GRID_UNIT_PX`` and ``QTWEBKIT_DPR``."
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:8
msgid "There are also other options available that may be useful for you depending on your device's form factor. These are mentioned below and explained in depth :ref:`in the section on display settings<Display-settings>`."
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:10
msgid "All of these settings are guessed by Unity 8 if none are set. There are many cases, however, where the guess is wrong (for example, very high resolution phone displays will be identified as desktop computers). To manually set a value for these variables, simply edit the file at ``etc/ubuntu-touch-session.d/android.conf`` specifying them. For example, this is the file for the Nexus 7 tablet::"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:18
msgid "The method for deriving values for these variables :ref:`is explained below. <Display-settings>`"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:20
msgid "Once you have adjusted the ``android.conf`` file to the display settings needed for your device, this file should be incorporated into your build. Follow :ref:`the overlay file method <Overlay-steps>` corresponding to your Halium version."
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:25
msgid "Determining the correct display settings"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:28
msgid "Display scaling"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:30
msgid "``GRID_UNIT_PX`` (Pixels per Grid Unit or Px/GU) is specific to each device. Its goal is to make the user interface of the system and its applications the same *perceived* size regardless of the device they are displayed on. It is primarily dependent on the pixel density of the device’s screen and the distance to the screen the user is at. The latter value cannot be automatically detected and is based on heuristics. We assume that tablets and laptops are the same distance and that they are held at 1.235 times the distance phones tend to be held at."
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:32
msgid "``QTWEBKIT_DPR`` sets the display scaling for the Oxide web engine, so changes to this value will affect the scale of the browser and webapps."
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:34
msgid "A reference device has been chosen from which we derive the values for all other devices. The reference device is a laptop with a 120ppi screen. However, there is no exact formula since these options are set for *perceived* size rather than *physical* size. Here are some values for other devices so you may derive the correct one for yours:"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:37
msgid "Device"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:37
msgid "Resolution"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:37
msgid "Display Size"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:37
msgid "PPI"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:37
msgid "Px/GU"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:37
msgid "QtWebKit DPR"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:39
msgid "'Normal' density laptop"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:39
#: ../../porting/configure_test_fix/Display.rst:39
#: ../../porting/configure_test_fix/Display.rst:41
#: ../../porting/configure_test_fix/Display.rst:41
msgid "N/A"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:39
msgid "96-150"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:39
msgid "8"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:39
msgid "1.0"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:40
msgid "ASUS Nexus 7"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:40
msgid "1280x800"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:40
msgid "7\""
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:40
msgid "216"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:40
msgid "12"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:40
#: ../../porting/configure_test_fix/Display.rst:42
#: ../../porting/configure_test_fix/Display.rst:43
#: ../../porting/configure_test_fix/Display.rst:44
msgid "2.0"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:41
msgid "'High' density laptop"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:41
msgid "150-250"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:41
msgid "16"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:41
msgid "1.5"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:42
msgid "Samsung Galaxy Nexus"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:42
msgid "1280x720"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:42
msgid "4.65\""
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:42
msgid "316"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:42
#: ../../porting/configure_test_fix/Display.rst:43
msgid "18"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:43
msgid "LG Nexus 4"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:43
msgid "1280x768"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:43
msgid "4.7\""
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:43
msgid "320"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:44
msgid "Samsung Nexus 10"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:44
msgid "2560x1600"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:44
msgid "10.1\""
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:44
msgid "299"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:44
msgid "20"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:45
msgid "Fairphone 2"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:45
#: ../../porting/configure_test_fix/Display.rst:46
msgid "1080x1920"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:45
msgid "5\""
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:45
msgid "440"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:45
#: ../../porting/configure_test_fix/Display.rst:46
msgid "23"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:45
#: ../../porting/configure_test_fix/Display.rst:46
msgid "2.5"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:46
msgid "LG Nexus 5"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:46
msgid "4.95\""
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:46
msgid "445"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:49
msgid "Experiment with a few values to find one that feels good when compared to the Ubuntu Touch experience on other devices. If you are unsure of which is the best, share some pictures (including some object for scale) along with the device specs with us."
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:51
msgid "There are two other settings that may be of interest to you:"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:54
msgid "Form factor"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:56
msgid "``FORM_FACTOR`` specifies the device's form factor. This value is set as the device's Chassis, which you can find by running ``hostnamectl``. The acceptable values are ``handset``, ``tablet``, ``laptop`` and ``desktop``. Apps such as the gallery use this information to change their functionality. For more information on the Chassis, see the freedesktop.org hostnamed specification."
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:59
msgid "Native orientation"
msgstr ""

#: ../../porting/configure_test_fix/Display.rst:61
msgid "``NATIVE_ORIENTATION`` sets the display orientation for the device's built-in screen. This value is used whenever autorotation isn't working correctly or when an app wishes to be locked to the device's native orientation. Acceptable values are ``landscape``, which is normally used for tablets, laptops, and desktops; and ``portrait``, which is usually used for phone handsets."
msgstr ""

#: ../../porting/configure_test_fix/Lomiri.rst:4
msgid "Lomiri - the graphical UI"
msgstr ""

#: ../../porting/configure_test_fix/Lomiri.rst:6
msgid "Now that you have gained access to your newly booted device, there remain a number of things to be configured before Ubuntu Touch will be fully functional on your device. The first is to add udev rules which are required for the graphical UI to be able to launch."
msgstr ""

#: ../../porting/configure_test_fix/Lomiri.rst:9
msgid "What are udev rules?"
msgstr ""

#: ../../porting/configure_test_fix/Lomiri.rst:11
msgid "On your running system there is a continuously running udev daemon which governs how the system handles events on peripheral devices, *e.g.* connecting the device to a PC via USB cable. This daemon needs a set of rules, *the udev rules*, to tell it what to do for each possible event. These rules must observe a specific format and they are stored in a file which needs to be generated for each specific device."
msgstr ""

#: ../../porting/configure_test_fix/Lomiri.rst:14
msgid "Add udev rules"
msgstr ""

#: ../../porting/configure_test_fix/Lomiri.rst:16
msgid "The correct way to do this is by storing these settings in overlay files (:ref:`Overlay`), and not by making the root directory writeable, as described below. However, in order to quickly set up udev rules which are necessary to complete subsequent steps, you can use the method detailed here for first time setup."
msgstr ""

#: ../../porting/configure_test_fix/Lomiri.rst:19
msgid "Make / (root) writable"
msgstr ""

#: ../../porting/configure_test_fix/Lomiri.rst:21
msgid "Before you make any changes to the rootfs (which will be required for the next steps), you'll need to remount your root directory (/) with write permissions. Do this by running the following command::"
msgstr ""

#: ../../porting/configure_test_fix/Lomiri.rst:26
msgid "Create and add udev rules"
msgstr ""

#: ../../porting/configure_test_fix/Lomiri.rst:28
msgid "You must create some udev rules to allow Ubuntu Touch software to access your hardware. Run the following command, replacing [CODENAME] with your device's codename::"
msgstr ""

#: ../../porting/configure_test_fix/Lomiri.rst:33
msgid "Now, reboot the device. If all has gone well, you will eventually see the Ubuntu Touch spinner followed by Unity 8. Your lock password is the same as you set for SSH."
msgstr ""

#: ../../porting/configure_test_fix/Lomiri.rst:35
msgid "When Unity 8 is first brought up on your device, you will probably notice that everything is very small. The :ref:`Display` section describes how to deal with this."
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:4
msgid "Overlay file method"
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:6
msgid "The UBports rootfs comes with a set of standard configuration files for a number of features such as display scaling, sound, bluetooth and more. These files may not tailored to the needs of your specific device and must therefore to be replaced in order for the feature in question to function as it should. This is done with overlay files, i.e. files that the original files get overwritten with. In other words, you need to rewrite the files in question, making the necessary adjustments for your device, and then see to it that these are incorporated into the build so that they will replace the originals."
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:8
msgid "If your build is based on the downloaded GSI and rootfs, installed using the halium-install script, then further adjustment of the build will not be possible. This is because the halium-script does not include any method for injecting overlay files. If, on the other hand, your build is based on Gitlab CI scripts, there is a way to further tweak your port with overlay files. This method is described at the end of this section."
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:13
msgid "Configuring features with overlay files"
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:15
msgid "For full ``system.img``-based builds, irrespective of Halium version, the method described below applies if the file you need to edit can be found in the /etc directory (or a subdirectory of this) on your device. In other words, the file or files you wish to overlay must actually exist and be located where specified above. You should not attempt to overwrite files located elsewhere using the method described here."
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:17
msgid "If your port is based on Gitlab CI scripts, it is actually possible to not only overlay existing files, but also introduce files that were not originally present. The method for Gitlab CI script based builds is detailed at the end of this section. If this is the method you will be using, you should still read both sections to gain a better understanding of how this method actually works."
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:20
msgid "Overlay method for full system.img builds"
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:22
msgid "In your device directory, create a subdirectory named 'ubuntu'. Collect the files you wish to inject into your build in this directory."
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:27
msgid "Relevant files are for example (but this list is incomplete):"
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:25
msgid "70-android.rules"
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:26
msgid "android.conf (for display scaling, see below)"
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:27
msgid "touch.pa (for pulseaudio sound configuration/initialization, see below)"
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:29
msgid "These files are then injected by adding a code block to the file ``device.mk`` in your device directory. For the three files above add the following code::"
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:38
msgid "The first of these three files, 70-android.rules, is the one you created when bringing up Lomiri. You can extract this file from the device using ``adb pull`` or ``scp`` and copy it to the 'ubuntu' directory of your device source tree, making sure to add the corresponding line to your ``device.mk`` file, as described above."
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:40
msgid "Explanation:"
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:42
msgid "The string before the colon '$(LOCAL_PATH)/ubuntu/70-android.rules' specifies the path to the source file to be injected. The string after the colon 'system/halium/lib/udev/rules.d/70-android.rules' specifies the target location on your device."
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:48
msgid "The general steps to follow are thus:"
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:45
msgid "Copy the file you wish to modify to the 'ubuntu' directory you have created in your device source tree."
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:46
msgid "Edit the file as needed."
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:47
msgid "Add a line to the PRODUCT_COPY_FILES section of your device.mk file as shown above."
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:48
msgid "Rebuild your system.img and reflash together with the ubports rootfs."
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:52
msgid "The target paths for the files mentioned above are *not* randomly chosen. You must use the specified paths."
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:56
msgid "When you specify target path 'system/halium/etc/myfilename' your file 'myfilename' will end up in the '/etc' directory of your device (i.e. without the leading 'system/halium')"
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:61
msgid "Rebuild system.img"
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:63
msgid "For Halium-7.1 ports and Halium-9.0 ports using a device specific system.img in place of the GSI, the system.img now needs to be rebuilt."
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:65
msgid "When you have made the adjustments you need and prepared your source as described above, rebuild the system image: ``mka systemimage``."
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:67
msgid "When rebuilding the system image after small changes like these, you need not ``mka clean`` first. However, changes to PRODUCT_PROPERTY_OVERRIDES might not get detected by the build system. To ensure this, go to the directory ``BUILDDIR/out/target/product/CODENAME/system`` and delete the file ``build.prop`` before rebuilding."
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:70
msgid "Overlay method for Gitlab CI script-based builds"
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:72
msgid "Builds in this category can also be adapted to a particular device using overlay files, and when building by this method (see :ref:`Gitlab-CI`) it is possible not only to replace existing files, but also to introduce new ones."
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:74
msgid "When you have prepared the files to replace or introduce, and determined the exact locations where they need to go on your device, these locations need to be replicated under the directory ``overlay/system/`` before running the Gitlab CI scripts according to `the instructions included. <https://gitlab.com/ubports/community-ports/android9/xiaomi-redmi-note-7-pro/xiaomi-violet/-/blob/master/README.md>`_"
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:77
msgid "For example:"
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:79
msgid "The udev rules file ``70-android.rules`` needs to go into ``system/halium/lib/udev/rules.d/``. This is accomplished by first creating the directory in the Gitlab scripts build tree. Standing in the root of this tree, first create the directory and then copy the file to this location::"
msgstr ""

#: ../../porting/configure_test_fix/Overlay.rst:84
msgid "Now run the build scripts and the file will get incorporated into your build. Flash the files as per `the instructions. <https://gitlab.com/ubports/community-ports/android9/xiaomi-redmi-note-7-pro/xiaomi-violet/-/blob/master/README.md>`_"
msgstr ""

#: ../../porting/configure_test_fix/Sound.rst:2
msgid "Sound"
msgstr ""

#: ../../porting/configure_test_fix/Sound.rst:4
msgid "Ubuntu Touch uses Pulseaudio as sound server. Documentation can be found at `freedesktop.org <https://www.freedesktop.org/wiki/Software/PulseAudio/Documentation/>`_ and in the `Ubuntu manpages <https://manpages.ubuntu.com/manpages/focal/man1/pulseaudio.1.html>`_"
msgstr ""

#: ../../porting/configure_test_fix/Sound.rst:6
msgid "The default configuration file used on Ubuntu Touch is ``touch.pa``. This file is located in the ``/etc/pulse`` directory on your device and it will need adjustment in order for sound to function properly. Extract the file and copy it to the ``ubuntu`` directory you created in your device repo (see :ref:`Overlay`)."
msgstr ""

#: ../../porting/configure_test_fix/Sound.rst:8
msgid "Locate the line::"
msgstr ""

#: ../../porting/configure_test_fix/Sound.rst:12
msgid "and replace it with this::"
msgstr ""

#: ../../porting/configure_test_fix/Sound.rst:16
msgid "At the end of the file, append this::"
msgstr ""

#: ../../porting/configure_test_fix/Sound.rst:23
msgid "Your modified ``touch.pa`` file now needs to be included in your build. Follow :ref:`the overlay file method <Overlay-steps>` corresponding to your Halium version."
msgstr ""

#: ../../porting/configure_test_fix/Wifi.rst:2
msgid "Wifi"
msgstr ""

#: ../../porting/configure_test_fix/Wifi.rst:4
msgid "For the time being, refer to `the Halium porting guide. <https://docs.halium.org/en/latest/porting/debug-build/wifi.html>`_"
msgstr ""

#: ../../porting/configure_test_fix/index.rst:2
msgid "Configuring, testing and fixing"
msgstr ""

#: ../../porting/configure_test_fix/index.rst:4
msgid "Now that you have successfully booted your build, you are ready to bring up the graphical UI, merge AppArmor into your port and see to any remaining functionality that needs configuring. This section explains how to perform these tasks."
msgstr ""

#: ../../porting/configure_test_fix/index.rst:6
msgid "If you are doing a GSI port, much, if not all device features, should already work 'out of the box' once you have brought up Lomiri and added AppArmor. For this reason, Halium-9/GSI porting as well as porting based on standalone kernel builds should normally require only udev rules, AppArmor patches and only limited, if any, configuring using the overlay file method. If, despite performing these tasks, your GSI-based build still does not function properly, you may have to resort to building a device-specific ``system.img`` in order to reach your goal."
msgstr ""

#: ../../porting/configure_test_fix/index.rst:8
msgid "On the other hand, Halium 7.1 porting and Halium-9.0 porting (when building the full device-specific ``system.img``) will require the most work."
msgstr ""

#: ../../porting/configure_test_fix/index.rst:10
msgid "Start by bringing up Lomiri, adjusting the display as required, and adding AppArmor. The remaining steps can be performed in arbitrary order and some may not apply to your particular port."
msgstr ""

#: ../../porting/configure_test_fix/index.rst:12
msgid "As you go along, it can be helpful to have a list of device functions to go by when checking what works and what needs debugging and fixing. This list, along with instructions on how to add your device to the list of devices that can run Ubuntu Touch, can be found in `the informative README.md file linked here. <https://gitlab.com/ubports/infrastructure/devices.ubuntu-touch.io/-/blob/main/README.md>`_"
msgstr ""

#: ../../porting/finalize/UBports_installer.rst:4
msgid "Configuring the UBports installer"
msgstr ""

#: ../../porting/finalize/UBports_installer.rst:6
msgid "For the time being, Halium-7.1 porters should refer to the UBports porting notes on `the UBPorts installer and System image <https://github.com/ubports/porting-notes/wiki/HowTo:-UBports-Installer-&-System-Image-(Halium-7.1)>`_."
msgstr ""

#: ../../porting/finalize/UBports_installer.rst:8
#: ../../porting/finalize/UBports_recovery.rst:8
msgid "For Halium-9.0, exact steps are not available at this time. Please :ref:`get in touch with the community for help. <Getting-community-help>`"
msgstr ""

#: ../../porting/finalize/UBports_recovery.rst:4
msgid "Building UBports recovery"
msgstr ""

#: ../../porting/finalize/UBports_recovery.rst:6
msgid "For the time being, Halium 7.1 porters should refer to the UBports porting notes on `the UBPorts installer and System image <https://github.com/ubports/porting-notes/wiki/HowTo:-UBports-Installer-&-System-Image-(Halium-7.1)>`_."
msgstr ""

#: ../../porting/finalize/index.rst:4
msgid "Finalizing the port"
msgstr ""

#: ../../porting/finalize/index.rst:6
msgid "Once most frequently used features are working on your port you can start thinking about finalizing it, i.e. building recovery and preparing the installer so that it is easier for people to install and test it. This can give valuable feedback that will potentially help you to find and diagnose remaining issues faster than you could have done on your own."
msgstr ""

#: ../../porting/finalize/index.rst:8
msgid "Previously, your port has had the rootfs and system image coexisting on the userdata partition. These need to be moved to the system partition in order to ensure a maximum of available space for user data. This is done by modifying the code, building ``recovery.img`` and subsequently rebuilding the boot image."
msgstr ""

#: ../../porting/finalize/index.rst:10
msgid "With the necessary components prepared, these should first be installed in their correct places manually for testing purposes. Once it has been confirmed that the port boots and works as it should, the final step is to prepare and test an installer config file that will permit the automation of the whole process."
msgstr ""

#: ../../porting/introduction/Intro.rst:2
msgid "Introduction to porting"
msgstr ""

#: ../../porting/introduction/Intro.rst:4
msgid "This first section will introduce you to the specifics of porting Ubuntu Touch to an Android device. Note that it is written with the general public in mind, not primarily the experienced porting developer. In subsequent sections we have made an effort to differentiate by keeping the main text more concise in order to meet the needs of the more experienced reader, while providing links to supplementary reading for the less experienced."
msgstr ""

#: ../../porting/introduction/Intro.rst:6
msgid "The guide as a whole is written as a sequence of steps describing how an ideal port might proceed. However, porting is unpredictable and messy. Every device is different and in reality you will likely iterate and revisit some steps, skip over other steps and uncover new and undocumented challenges."
msgstr ""

#: ../../porting/introduction/Intro.rst:11
msgid "What is Ubuntu Touch?"
msgstr ""

#: ../../porting/introduction/Intro.rst:13
msgid "Ubuntu Touch is an open source operating system for mobile devices. It can be ported to devices that originally shipped with Android OS. Alas, the majority of these devices are dependent to some degree on proprietary software."
msgstr ""

#: ../../porting/introduction/Intro.rst:17
msgid "To be specific, device vendors tend to keep the code that speaks directly to the device hardware (the low level device drivers) proprietary. These components are commonly called the `vendor 'blobs' (Binary Large OBjects) <https://en.wikipedia.org/wiki/Proprietary_device_driver>`_. The vendor blobs need to be incorporated into an Ubuntu Touch port. Note that these components are specific not only to each device, but also to each Android version. It is therefore necessary to secure the correct version of these components when building a port."
msgstr ""

#: ../../porting/introduction/Intro.rst:19
msgid "This is why Ubuntu Touch cannot be built completely from source code for most commercial devices. Instead, porting the system to these devices involves integrating the previously mentioned vendor blobs into the rest of the system, which can be built from source."
msgstr ""

#: ../../porting/introduction/Intro.rst:21
msgid "The next component of Ubuntu Touch is a pre-compiled root filesystem which needs to be installed on the device. This component does not communicate directly with the device hardware. Instead, this communication is mediated by a Hardware Abstraction Layer (HAL) which needs to be built for each specific device, because each device has its specific hardware architecture. This component is called Halium  and is available in different versions (5.1 which is largely obsolete, 7.1, 9 and 10 as of writing) corresponding to different Android versions."
msgstr ""

#: ../../porting/introduction/Intro.rst:23
msgid "The `Halium project <https://halium.org/>`_ enables Linux systems to run on Android hardware. It is a joint effort by multiple mobile operating systems, notably Lune OS and UBports."
msgstr ""

#: ../../porting/introduction/Intro.rst:25
msgid "UBports porting builds on top of Halium porting. Consequently, you will be using both the Halium porting guide and the UBports porting guide. At times it may also be helpful to test with one of the other operating systems to debug a problem from different angles."
msgstr ""

#: ../../porting/introduction/Intro.rst:27
msgid "Halium is an indispensible part of an Ubuntu Touch port and is available in the form of open source software. Developing a new version of Halium is a very considerable task which is why only a few versions of Halium are available. Each port of Ubuntu Touch has to be based on one of the available Halium versions and vendor blobs from the corresponding Android version. See the first two columns of the table below for details."
msgstr ""

#: ../../porting/introduction/Intro.rst:32
msgid "Thus an Ubuntu Touch port is composed of the these components:"
msgstr ""

#: ../../porting/introduction/Intro.rst:30
msgid "The Ubuntu Touch (UT) root filesystem (rootfs)"
msgstr ""

#: ../../porting/introduction/Intro.rst:31
msgid "`Halium <https://halium.org/>`_ (contained in the boot and system images)"
msgstr ""

#: ../../porting/introduction/Intro.rst:32
msgid "The vendor blobs"
msgstr ""

#: ../../porting/introduction/Intro.rst:34
msgid "You, the porter, need to build Halium (in part or in whole, depending on :ref:`porting method <Porting-methods>`) and install this together with the Ubuntu Touch rootfs in order to create a functioning Ubuntu Touch port."
msgstr ""

#: ../../porting/introduction/Intro.rst:39
msgid "Android and Halium versions"
msgstr ""

#: ../../porting/introduction/Intro.rst:41
msgid "Halium is built using source code for a modified version of the Android operating system called LineageOS (see `the LineageOS website <https://lineageos.org/>`_ and `wiki <https://wiki.lineageos.org/>`_). The required source code is available online and needs to be downloaded and configured to build the correct Halium version for each individual device port. The table below shows which versions are required for the different Halium versions."
msgstr ""

#: ../../porting/introduction/Intro.rst:44
msgid "Android version"
msgstr ""

#: ../../porting/introduction/Intro.rst:44
msgid "Halium version"
msgstr ""

#: ../../porting/introduction/Intro.rst:44
msgid "Lineage OS (LOS)"
msgstr ""

#: ../../porting/introduction/Intro.rst:46
#: ../../porting/introduction/Intro.rst:46
msgid "7.1"
msgstr ""

#: ../../porting/introduction/Intro.rst:46
msgid "14.1"
msgstr ""

#: ../../porting/introduction/Intro.rst:47
#: ../../porting/introduction/Intro.rst:47
msgid "9.0"
msgstr ""

#: ../../porting/introduction/Intro.rst:47
msgid "16.0"
msgstr ""

#: ../../porting/introduction/Intro.rst:48
#: ../../porting/introduction/Intro.rst:48
msgid "10.0"
msgstr ""

#: ../../porting/introduction/Intro.rst:48
msgid "17.0"
msgstr ""

#: ../../porting/introduction/Intro.rst:54
msgid "Generic System Image"
msgstr ""

#: ../../porting/introduction/Intro.rst:56
msgid "Starting with Android version 9.0, a significant change of architecture was introduced. The device-specific vendor blobs now reside on a separate partition instead of sharing a partition with the rest of the system image. This separation of device-specific code from generic code made possible what is known as the **Generic System Image (GSI)**."
msgstr ""

#: ../../porting/introduction/Intro.rst:59
msgid "A GSI is a system image that is built to be able to function with a wide range of devices. Android devices, as of version 9.0, use a GSI. For more information, see the `Android Developer pages <https://developer.android.com/topic/generic-system-image/>`_"
msgstr ""

#: ../../porting/introduction/Intro.rst:61
msgid "The development of the Android GSI architecture also cleared the way for the now available generic Halium 9.0 arm64 system image (hereafter referred to as *the Halium GSI*, or simply *the GSI*) which is used for Ubuntu Touch. This, however, is somewhat different from the Android GSI. For a more detailed explanation of the Halium GSI, please refer to `the wiki page on Gitlab CI builds of the generic Halium system image <https://github.com/ubports/porting-notes/wiki/GitLab-CI-builds-for-devices-based-on-halium_arm64-(Halium-9)>`_."
msgstr ""

#: ../../porting/introduction/Intro.rst:64
msgid "What does this mean for the porting process?"
msgstr ""

#: ../../porting/introduction/Intro.rst:66
msgid "Since the GSI is a prebuilt, device-independent component, it effectively simplifies the task of building a viable port by removing much of the meticulous and time consuming task of getting the hardware-specific vendor blobs compiled into the system image and configured to function properly."
msgstr ""

#: ../../porting/introduction/Intro.rst:71
msgid "Porting methods"
msgstr ""

#: ../../porting/introduction/Intro.rst:73
msgid "This guide documents three different porting methods, which we call: **Full system image method**, **Halium-boot method**, and **Standalone kernel method**. When porting based on Halium 7.1 the Full system image method is the only available method to follow. For Halium 9.0 all three methods are possible."
msgstr ""

#: ../../porting/introduction/Intro.rst:77
msgid "Full system image method"
msgstr ""

#: ../../porting/introduction/Intro.rst:79
msgid "This porting method requires building both the boot image (halium-boot.img) and the full device specific system image (system.img) from source and installing these together with the UBports root file system (rootfs). For Halium 7.1 ports this is the only possible method (Consequently, this method is sometimes referred to as *the Halium 7.1 method*). For Halium 9.0 it is also possible to use this method, however for Halium 9.0 the other two methods below are probably easier."
msgstr ""

#: ../../porting/introduction/Intro.rst:83
msgid "Halium-boot method"
msgstr ""

#: ../../porting/introduction/Intro.rst:85
msgid "For this porting method it is sufficent to build the halium-boot.img and install this together with the Halium GSI and the UBports rootfs. This method can be used for Halium 9.0 ports."
msgstr ""

#: ../../porting/introduction/Intro.rst:90
msgid "This porting method only requires building the kernel and installing this together with the Halium ramdisk, the Halium GSI and the UBports rootfs. This method can be used for Halium 9.0 ports."
msgstr ""

#: ../../porting/introduction/Intro.rst:92
msgid "All methods share some common steps. However, there are also significant differences that must not be missed. Therefore, the methods will be treated separately in the subsequent sections where needed."
msgstr ""

#: ../../porting/introduction/Intro.rst:94
msgid "The remainder of this section gives some words of advice to new porters. If you already have porting experience or ROM building experience, you can likely skip straight to :ref:`Preparations <Preparations>`."
msgstr ""

#: ../../porting/introduction/Intro.rst:99
msgid "The challenges of the porting process"
msgstr ""

#: ../../porting/introduction/Intro.rst:101
msgid "Building the necessary components and getting them to work together properly always involves an amount of code modifications, configuring and testing, but considerably moreso when doing full system image builds, compared to builds using the GSI (see :ref:`porting methods <Porting-methods>`)."
msgstr ""

#: ../../porting/introduction/Intro.rst:103
msgid "Luckily, there is a community of porters out there who are eager to see Ubuntu Touch ported to new devices. When you run into trouble, you should search the sources below (:ref:`Getting-community-help`) to see if others before you have solved the issue. There are online Telegram chat groups you can join to ask for help, but please bear in mind that those participating are doing so in their spare time."
msgstr ""

#: ../../porting/introduction/Intro.rst:108
msgid "Prior knowledge and skills"
msgstr ""

#: ../../porting/introduction/Intro.rst:110
msgid "Porters come in all sizes and shapes, so to speak. Therefore, this guide does not presuppose extensive knowledge or skills in any particular field. You should, however, as a bare minimum be familiar with some common shell commands and be comfortable working from the terminal on you host PC. Furthermore, the guide is based on a host PC running Linux. If you have some knowledge of programming, this will come in handy at some point, especially if you are familiar with C / C++. Also, you should familiarize yourself with git and set up a Github or Gitlab account to keep track of your code changes. It is wise to start documenting your steps from the very beginning."
msgstr ""

#: ../../porting/introduction/Intro.rst:112
msgid "We have attempted to give a certain amount of explanation along the way. However, this guide is not an in-depth reference into the architecture and inner workings of Ubuntu Touch, and gaining a deeper understanding will consequently require an amount of research on your part."
msgstr ""

#: ../../porting/introduction/Intro.rst:117
msgid "Getting community help"
msgstr ""

#: ../../porting/introduction/Intro.rst:119
msgid "When you run into trouble, and you will, refer to one or more of the sources below:"
msgstr ""

#: ../../porting/introduction/Intro.rst:121
msgid "`Telegram: @halium <https://t.me/halium>`_"
msgstr ""

#: ../../porting/introduction/Intro.rst:122
msgid "`Telegram: @ubports_porting <https://t.me/ubports_porting>`_"
msgstr ""

#: ../../porting/introduction/Intro.rst:123
msgid "`The UBports Forum <https://forums.ubports.com/category/33/porting>`_"
msgstr ""

#: ../../porting/introduction/Intro.rst:124
msgid "Matrix: #halium:matrix.org"
msgstr ""

#: ../../porting/introduction/Intro.rst:129
msgid "General advice"
msgstr ""

#: ../../porting/introduction/Intro.rst:131
msgid "The more rigorous you are at making notes and documenting your steps, the less time you will spend backtracking your steps and guessing your way along. When dealing with issues that arise along the way, it is wise to work on them one at a time. If you try to correct several things at once, you risk ending up trying to guess which changes solved a given issue, which easily leads to breaking the functionality in question once more at some later stage."
msgstr ""

#: ../../porting/introduction/Intro.rst:133
msgid "If you are not discouraged after reading this, we welcome your efforts and wish you the best of luck!"
msgstr ""

#: ../../porting/introduction/Intro.rst:135
msgid "The next section presents a key to the rest of this guide."
msgstr ""

#: ../../porting/introduction/Preparations.rst:4
msgid "Preparations"
msgstr ""

#: ../../porting/introduction/Preparations.rst:6
msgid "Not all devices can be made to run Ubuntu Touch. Research your target device before you start."
msgstr ""

#: ../../porting/introduction/Preparations.rst:8
msgid "To determine your device's specifications, search for it on `GSM Arena <https://www.gsmarena.com>`_ and/or `Device Specification <https://www.devicespecifications.com/en>`_. Refer to `Pick an Android target device in the Halium Porting Guide <http://docs.halium.org/en/latest/porting/first-steps.html#pick-an-android-target-device>`_ for further information on requirements and how to check if your device qualifies."
msgstr ""

#: ../../porting/introduction/Preparations.rst:14
msgid "Locate relevant guides and other information"
msgstr ""

#: ../../porting/introduction/Preparations.rst:16
msgid "If your desired target device complies to the above, the next thing to do is locate the available guides and other documentation. This step will help you later on when you run into issues developing your port. For now, the main thing to look for is how to unlock your bootloader. (See below)."
msgstr ""

#: ../../porting/introduction/Preparations.rst:18
msgid "Head over to the `LineageOS Wiki <https://wiki.lineageos.org/>`_. Look up your device and read and bookmark the guides that are listed there. Try a web search for additional information, specifying both its retail name and the code name you found on the LineageOS site. Be careful to check that the information you gather applies to your specific device, keeping in mind that many devices are sold in a number of different variants with different hardware specifications."
msgstr ""

#: ../../porting/introduction/Preparations.rst:20
msgid "Another rich source of information is the `XDA Developers Forum <https://www.xda-developers.com/>`_."
msgstr ""

#: ../../porting/introduction/Preparations.rst:25
msgid "Unlock the bootloader"
msgstr ""

#: ../../porting/introduction/Preparations.rst:27
msgid "Vendors usually provide their devices in a locked bootloader state. This is a kind of software \"seal\" intended to prevent modifications directly to the operating system and system software. If you unlock the bootloader, you will be able to make such modifications, but in this state your device's warranty might be void. The choice is yours, but this step is mandatory if you wish to install Ubuntu Touch on the device."
msgstr ""

#: ../../porting/introduction/Preparations.rst:29
msgid "Devices differ and there is no general method that covers all makes and models. Therefore, you need to check the aforementioned guides for instructions on how to unlock the bootloader of your particular device."
msgstr ""

#: ../../porting/introduction/Preparations.rst:34
msgid "Install TWRP recovery"
msgstr ""

#: ../../porting/introduction/Preparations.rst:36
msgid "You need to install a custom recovery image on your device in order to handle formatting and flashing image files onto it. Head over to the `Team Win Recovery Project <https://twrp.me/Devices/>`_  and locate the image file for your device. Follow the installation instructions provided on the website."
msgstr ""

#: ../../porting/introduction/Preparations.rst:41
msgid "Recommendations for the host/build PC"
msgstr ""

#: ../../porting/introduction/Preparations.rst:43
msgid "The remainder of this guide presumes you are using a build PC running Linux. Although high performance always is nice, stability and sufficient RAM and harddisk space are the main concerns here. You do not need the latest and the best hardware, nor do you need the latest distribution release. In fact, it is not uncommon to run into issues when choosing the very newest release, as some of the software needed may not yet have been built for it. For example, as of writing the latest release of Ubuntu Linux is 20.04, but many still recommend using the previous long term support release, 18.04."
msgstr ""

#: ../../porting/introduction/Preparations.rst:45
msgid "Having completed the steps above, you are now ready to set up your build environment and start the porting process per se (next section)."
msgstr ""

#: ../../porting/introduction/Setting_up.rst:6
msgid "Your host PC needs a number of tools installed before you can begin to port. This section describes the necessary preparations."
msgstr ""

#: ../../porting/introduction/Setting_up.rst:9
msgid "Prerequisites"
msgstr ""

#: ../../porting/introduction/Setting_up.rst:11
msgid "When setting up the build environment you need to have Python 3.6 or newer installed on your system. This can be installed via your system's package management system. Significant changes in syntax were introduced from Python 2 to Python 3, and some stages of the porting process may require Python 2 instead of Python 3. To check which version is active on your system, type::"
msgstr ""

#: ../../porting/introduction/Setting_up.rst:16
msgid "Any Linux distribution can easily be set up to switch between Python versions. Consult the documentation for your distribution to find out how this can be done."
msgstr ""

#: ../../porting/introduction/Setting_up.rst:19
msgid "Debian (Stretch or newer) / Ubuntu (16.04 or 18.04)"
msgstr ""

#: ../../porting/introduction/Setting_up.rst:21
#: ../../porting/introduction/Setting_up.rst:41
msgid "If your host PC has a 64-bit architecture (amd64), enable the usage of the i386 architecture::"
msgstr ""

#: ../../porting/introduction/Setting_up.rst:25
#: ../../porting/introduction/Setting_up.rst:45
msgid "Update your package lists to take advantage of the new architecture::"
msgstr ""

#: ../../porting/introduction/Setting_up.rst:29
#: ../../porting/introduction/Setting_up.rst:49
msgid "Install the required dependencies::"
msgstr ""

#: ../../porting/introduction/Setting_up.rst:39
msgid "Ubuntu (20.04 or newer)"
msgstr ""

#: ../../porting/introduction/Setting_up.rst:59
msgid "Create a directory named 'bin' in your home directory, and include it in your path::"
msgstr ""

#: ../../porting/introduction/Setting_up.rst:65
msgid "Download the repo script and make it executable::"
msgstr ""

#: ../../porting/introduction/Setting_up.rst:71
msgid "Arch"
msgstr ""

#: ../../porting/introduction/Setting_up.rst:73
msgid "If your host PC has a 64-bit architecture, you need to add the [multilib] repository to your /etc/pacman.conf . This will allow you to install and run i686 packages. Please refer to `‘Official Repositories/multilib’ on the Arch Wiki <https://wiki.archlinux.org/index.php/Official_repositories>`_."
msgstr ""

#: ../../porting/introduction/Setting_up.rst:75
msgid "Make sure you have the base-devel package installed."
msgstr ""

#: ../../porting/introduction/Setting_up.rst:77
msgid "Install the required dependencies from AUR::"
msgstr ""

#: ../../porting/introduction/index.rst:2
msgid "Introduction"
msgstr ""

#: ../../porting/introduction/index.rst:4
msgid "Porting is the process of making Ubuntu Touch run on new hardware, i.e. on devices that have not previously been able to run Ubuntu Touch."
msgstr ""

#: ../../porting/introduction/index.rst:6
msgid "On the vast majority of commercially available devices crucial parts of their systems are not open source. Furthermore, these proprietary parts are specific, not only to the manufacturer, but usually also to the individual model."
msgstr ""

#: ../../porting/introduction/index.rst:8
msgid "Porting Ubuntu Touch involves building it in such a way as to integrate it with these proprietary components on a device so as to enable it to \"talk to\" the device hardware."
msgstr ""

#: ../../porting/introduction/index.rst:10
msgid "Before attempting to port Ubuntu Touch to a new device, there are a few things to understand and consider, some research to be done, and a suitable build environment needs to be set up. This section addresses these points."
msgstr ""
