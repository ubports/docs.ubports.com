# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, The UBports project (Creative Commons BY-SA 4.0)
# This file is distributed under the same license as the UBports package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: UBports 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-11-30 10:25-0600\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../systemdev/index.rst:2
msgid "System software development"
msgstr ""

#: ../../systemdev/index.rst:4
msgid "This section has various documents which will teach you how to work with the packages included with Ubuntu Touch. This includes the Ubuntu UI Toolkit, Unity8, and all of the other software that makes Ubuntu Touch what it is."
msgstr ""

#: ../../systemdev/index.rst:6
msgid "This section does not cover most of the *applications* preinstalled on Ubuntu Touch. See :doc:`/contribute/preinstalled-apps` for more information on those."
msgstr ""

#: ../../systemdev/index.rst:9
msgid "System Software guides"
msgstr ""

#: ../../systemdev/index.rst:11
msgid "These guides will give you general instructions on building and testing your own changes to Ubuntu Touch system software. They are not not an exhaustive reference on everything you will come across during development, but they are a great starting point."
msgstr ""

#: ../../systemdev/index.rst:15
msgid "If you get stuck at any point while going through this documentation, please contact us for help via `the UBports Forum <https://forums.ubports.com>`_ or your preferred communication medium."
msgstr ""

#: ../../systemdev/index.rst:25
msgid "System Software reference"
msgstr ""

#: ../../systemdev/index.rst:27
msgid "This section includes reference guides on how different parts of the Ubuntu Touch system interact to create the user experience."
msgstr ""

#: ../../systemdev/index.rst:29
msgid "There's nothing here yet, but maybe you'd like to add some reference material? Check out :doc:`our guide to contributing to documentation </contribute/documentation>` to learn more."
msgstr ""

#: ../../systemdev/testing-locally.rst:2
msgid "Making changes and testing locally"
msgstr ""

#: ../../systemdev/testing-locally.rst:4
msgid "On this page you'll find information on how to build Ubuntu Touch system software for your device. Most of the software preinstalled on your Ubuntu Touch device is shipped in the device image in the form of a Debian package. This format is used by several Linux distributions, such as Debian, Ubuntu, and Linux Mint. Plenty of `documentation on deb packages <https://www.debian.org/doc/manuals/maint-guide/index.en.html>`__ is available, so we won't be covering it here. Besides, in most cases you'll find yourself in need of modifying existing software rather than developing new packages from scratch. For this reason, this guide is mostly about recompiling an existing Ubuntu Touch package."
msgstr ""

#: ../../systemdev/testing-locally.rst:6
msgid "There are essentially two ways of developing Ubuntu Touch system software locally:"
msgstr ""

#: ../../systemdev/testing-locally.rst:8
msgid "`Cross-building with crossbuilder`_"
msgstr ""

#: ../../systemdev/testing-locally.rst:9
msgid "`Building on the device itself`_"
msgstr ""

#: ../../systemdev/testing-locally.rst:11
msgid "We'll examine both methods, using `address-book-app <https://github.com/ubports/address-book-app>`__ (the Contacts application) as an example."
msgstr ""

#: ../../systemdev/testing-locally.rst:13
msgid "We only recommend developing packages using a device with Ubuntu Touch installed from the devel channel. This ensures that you are testing your changes against the most current state of the Ubuntu Touch code."
msgstr ""

#: ../../systemdev/testing-locally.rst:17
msgid "Installing packages has a risk of damaging the software on your device, rendering it unusable. If this happens, you can :doc:`reinstall Ubuntu Touch </userguide/install>`."
msgstr ""

#: ../../systemdev/testing-locally.rst:20
msgid "Cross-building with crossbuilder"
msgstr ""

#: ../../systemdev/testing-locally.rst:22
msgid "Crossbuilder is a script which automates the setup and use of a crossbuild environment for Debian packages. It is suitable for developers with any device since the code compilation occurs on your desktop PC rather than the target device. This makes Crossbuilder the recommended way to develop non-trivial changes to Ubuntu Touch."
msgstr ""

#: ../../systemdev/testing-locally.rst:26
msgid "Crossbuilder requires a Linux distribution with ``lxd`` installed and the unprivileged commandset available. In other words, you must be able to run the ``lxc`` command. If you are running Ubuntu on your host, Crossbuilder will set up ``lxd`` for you."
msgstr ""

#: ../../systemdev/testing-locally.rst:28
msgid "Start by installing Crossbuilder on your host::"
msgstr ""

#: ../../systemdev/testing-locally.rst:33
msgid "Crossbuilder is a shell script, so you don't need to build it. Instead, you will need to add its directory to your ``PATH`` environment variable, so that you can execute it from any directory::"
msgstr ""

#: ../../systemdev/testing-locally.rst:39
msgid "Now that Crossbuilder is installed, we can use it to set up LXD::"
msgstr ""

#: ../../systemdev/testing-locally.rst:43
msgid "If this is the first time you have used LXD, you might need to reboot your host once everything has completed."
msgstr ""

#: ../../systemdev/testing-locally.rst:45
msgid "After LXD has been set up, move to the directory where the source code of your project is located (for example, ``cd ~/src/git/address-book-app``) and launch Crossbuilder::"
msgstr ""

#: ../../systemdev/testing-locally.rst:49
msgid "Crossbuilder will create the LXD container, download the development image, install all your package build dependencies, and perform the package build. It will also copy the packages over to your target device and install them if it is connected (see :doc:`/userguide/advanceduse/adb` to learn more about connecting your device). The first two steps (creating the LXD image and getting the dependencies) can take a few minutes, but will be executed only the first time you launch crossbuilder for a new package."
msgstr ""

#: ../../systemdev/testing-locally.rst:51
msgid "Now, whenever you change the source code in your git repository, the same changes will be available inside the container. The next time you type the ``crossbuilder`` command, only the changed files will be rebuilt."
msgstr ""

#: ../../systemdev/testing-locally.rst:54
msgid "Unit tests"
msgstr ""

#: ../../systemdev/testing-locally.rst:56
msgid "By default crossbuilder does not run unit tests; that's both for speed reasons, and because the container created by crossbuilder is not meant to run native (target) executables: the development tools (qmake/cmake, make, gcc, etc.) are all run in the host architecture, with no emulation (again, for speed reasons). However, qemu emulation is available inside the container, so it should be possible to run unit tests. You can do that by getting a shell inside the container::"
msgstr ""

#: ../../systemdev/testing-locally.rst:60
msgid "Then find the unit tests and execute them. Be aware that the emulation is not perfect, so there's a very good chance that the tests will fail even when they'd otherwise succeed when run in a proper environment. For that reason, it's probably wiser not to worry about unit tests when working with crossbuilder, and run them only when not cross-compiling."
msgstr ""

#: ../../systemdev/testing-locally.rst:63
msgid "Building on the device itself"
msgstr ""

#: ../../systemdev/testing-locally.rst:65
msgid "This is the fastest and simplest method to develop small changes and test them in nearly real-time. Depending on your device resources, however, it might not be possible to follow this path: if you don't have enough free space in your root filesystem you won't be able to install all the package build dependencies; you may also run out of RAM while compiling."
msgstr ""

#: ../../systemdev/testing-locally.rst:69
msgid "This method is limited. Many devices do not have enough free image space to install the packages required to build components of Ubuntu Touch."
msgstr ""

#: ../../systemdev/testing-locally.rst:71
msgid "In this example, we'll build and install the address-book-app. All commands shown here must be run on your Ubuntu Touch device over a remote shell."
msgstr ""

#: ../../systemdev/testing-locally.rst:73
msgid "You can gain a shell on the device using :doc:`/userguide/advanceduse/adb` or :doc:`/userguide/advanceduse/ssh`. Remount the root filesystem read-write to begin::"
msgstr ""

#: ../../systemdev/testing-locally.rst:77
msgid "Next, install all the packages needed to rebuild the component you want to modify (the Contacts app, in this example)::"
msgstr ""

#: ../../systemdev/testing-locally.rst:83
msgid "Additionally, you probably want to install ``git`` in order to get your app's source code on the device and later push your changes back into the repository::"
msgstr ""

#: ../../systemdev/testing-locally.rst:87
msgid "Once you're finished, you can retrieve the source for an app (in our example, the address book) and move into its directory::"
msgstr ""

#: ../../systemdev/testing-locally.rst:92
msgid "Now, you are ready to build the package::"
msgstr ""

#: ../../systemdev/testing-locally.rst:96
msgid "The ``dpkg-buildpackage`` command will print out the names of generated packages. Install those packages with ``dpkg``::"
msgstr ""

#: ../../systemdev/testing-locally.rst:100
msgid "Note, however, that you might not need to install all the packages: generally, you can skip all packages whose names end with ``-doc`` or ``dev``, since they don't contain code used by the device."
msgstr ""

#: ../../systemdev/testing-locally.rst:103
msgid "Next steps"
msgstr ""

#: ../../systemdev/testing-locally.rst:105
msgid "Now that you've successfully made changes and tested them locally, you're ready to upload them to GitHub. Move on to the next page to learn about using the UBports CI to build and provide development packages!"
msgstr ""

#: ../../systemdev/uploading-changes.rst:2
msgid "Uploading and testing with ``ubports-qa``"
msgstr ""

#: ../../systemdev/uploading-changes.rst:4
msgid "The `UBports build service <https://ci.ubports.com>`_ is capable of building Ubuntu Touch packages and deploying them to the `UBports repository <https://repo.ubports.com>`_. This capability is offered to any developer who wishes to take advantage of it."
msgstr ""

#: ../../systemdev/uploading-changes.rst:6
msgid "This guide assumes that you have a cursory understanding of using Git and making Pull Requests on GitHub."
msgstr ""

#: ../../systemdev/uploading-changes.rst:8
msgid "To use the `UBports build service`_, make sure you understand our :doc:`branch naming convention </about/process/branch-naming>`. It is required that you follow the convention for deb-packages for CI to build your package correctly."
msgstr ""

#: ../../systemdev/uploading-changes.rst:11
msgid "Fork the repository"
msgstr ""

#: ../../systemdev/uploading-changes.rst:13
msgid "The first step to make a change to any repository you don't have write access to is to fork it. Open your desired repository on GitHub and click the \"Fork\" button in the upper right corner. If offered, select an appropriate account to fork the repository to. Then, clone your fork to your computer."
msgstr ""

#: ../../systemdev/uploading-changes.rst:15
msgid "Now you're ready to make changes!"
msgstr ""

#: ../../systemdev/uploading-changes.rst:18
msgid "Make and commit changes"
msgstr ""

#: ../../systemdev/uploading-changes.rst:20
msgid "Now that you have the package source downloaded, you can make your desired changes."
msgstr ""

#: ../../systemdev/uploading-changes.rst:22
msgid "Before changing anything, make sure you have checked out the branch you want to work from (probably ``xenial``, assuming you are making changes for the phone images). Then, create a new branch abiding by the :doc:`branch naming convention </about/process/branch-naming>`."
msgstr ""

#: ../../systemdev/uploading-changes.rst:24
msgid "After making your changes, commit them with a descriptive commit message stating what is wrong and why your changes fix that problem."
msgstr ""

#: ../../systemdev/uploading-changes.rst:26
msgid "You have successfully created and committed your changes. Before pushing your changes, we'll want to make sure your device will install them."
msgstr ""

#: ../../systemdev/uploading-changes.rst:29
msgid "Update the ``debian/changelog`` file"
msgstr ""

#: ../../systemdev/uploading-changes.rst:31
msgid "Generally, ``apt`` will not install a new package from any repository if it has a lower (or the same) version number as the package it replaces. Users may also want to see the changes that are included in a new version of a package. For that reason, we will need to update the package changelog to add a new version."
msgstr ""

#: ../../systemdev/uploading-changes.rst:35
msgid "This is not an exhaustive reference of the ``debian/changelog`` format. See `deb-changelog(5) <https://manpages.debian.org/testing/dpkg-dev/deb-changelog.5.en.html>`_ for more information."
msgstr ""

#: ../../systemdev/uploading-changes.rst:38
msgid "Determine a new version number"
msgstr ""

#: ../../systemdev/uploading-changes.rst:40
msgid "To start, figure out what the current version numbering for the package is::"
msgstr ""

#: ../../systemdev/uploading-changes.rst:44
msgid "This will return a few lines, but the first is the most important to us::"
msgstr ""

#: ../../systemdev/uploading-changes.rst:48
msgid "The part inside the parentheses ``(0.24+ubports2)`` is our version number. It consists of several parts:"
msgstr ""

#: ../../systemdev/uploading-changes.rst:50
msgid "The ``0.24`` is the *upstream version number*, the version that the original project maintainers give to the release we are using. For most UBports projects, the repository you'll be working on is the original project code. This makes UBports the \"upstream\" of that project."
msgstr ""

#: ../../systemdev/uploading-changes.rst:52
msgid "If you are making large changes to the repository and UBports is the upstream, you should increment the first part of the version number before the plus (+) and reset the distribution suffix. In our example above, you would make this new version number::"
msgstr ""

#: ../../systemdev/uploading-changes.rst:56
msgid "If you are making changes only to the package build (files in the ``debian/`` folder), it is best to only increment the version suffix::"
msgstr ""

#: ../../systemdev/uploading-changes.rst:62
msgid "If you find a package which does not seem to follow the above versioning format, please contact us to ask how to proceed."
msgstr ""

#: ../../systemdev/uploading-changes.rst:65
msgid "Write the changelog entry"
msgstr ""

#: ../../systemdev/uploading-changes.rst:67
msgid "Now it is time to write your changelog entry! Start with the following template::"
msgstr ""

#: ../../systemdev/uploading-changes.rst:75
msgid "If you open the ``debian/changelog`` file, you'll find that every entry follows this format. This helps everyone (including computers) read and understand the contents. This is used, for example, to name the output package correctly for every package version."
msgstr ""

#: ../../systemdev/uploading-changes.rst:77
msgid "Let's assume I, John Doe, am making a packaging change to the ``morph-browser`` package for Ubuntu Touch. I'll replace the different all-caps placeholders above in the following way:"
msgstr ""

#: ../../systemdev/uploading-changes.rst:79
msgid "PACKAGE-NAME is replaced with ``morph-browser``"
msgstr ""

#: ../../systemdev/uploading-changes.rst:80
msgid "VERSION is replaced with ``0.24+ubports3`` (which we determined above)"
msgstr ""

#: ../../systemdev/uploading-changes.rst:81
msgid "DISTRIBUTION is replaced with ``xenial``"
msgstr ""

#: ../../systemdev/uploading-changes.rst:82
msgid "CHANGES is replaced with the changes I made in this release. This will include summarized information from my commit messages along with the bugs fixed by those changes. If I've fixed multiple bugs, I'll create multiple bullet points."
msgstr ""

#: ../../systemdev/uploading-changes.rst:83
msgid "NAME is replaced with my name, ``John Doe``"
msgstr ""

#: ../../systemdev/uploading-changes.rst:84
msgid "EMAIL is replaced with my e-mail, ``john.doe@example.com``."
msgstr ""

#: ../../systemdev/uploading-changes.rst:88
msgid "You should not use a \"noreply\" e-mail as your EMAIL for package changelog entries."
msgstr ""

#: ../../systemdev/uploading-changes.rst:90
msgid "DATETIME is replaced with the date and time I made this changelog entry in RFC2822/RFC5322 format. The easiest way to retrieve this is by running the command ``date -R`` in a terminal."
msgstr ""

#: ../../systemdev/uploading-changes.rst:92
msgid "Note that no line in your changelog entry should exceed 80 characters in length."
msgstr ""

#: ../../systemdev/uploading-changes.rst:94
msgid "With that, my new changelog entry follows::"
msgstr ""

#: ../../systemdev/uploading-changes.rst:104
msgid "Add your new changelog entry to the top of the ``debian/changelog`` file and commit it with the message \"Update changelog\". Push your changes. Now you're ready to make your Pull Request!"
msgstr ""

#: ../../systemdev/uploading-changes.rst:107
msgid "Create your pull request"
msgstr ""

#: ../../systemdev/uploading-changes.rst:109
msgid "A pull request asks UBports maintainers to review your code changes and add them to the official repository. We'll create one now."
msgstr ""

#: ../../systemdev/uploading-changes.rst:111
msgid "Open your fork of the repository on GitHub. Navigate to the branch that you just pushed to using the \"Branch\" selector:"
msgstr ""

#: ../../systemdev/uploading-changes.rst:117
msgid "Once you've opened your desired branch, click the \"New pull request\" button to start your pull request. You'll be taken to a page where you can review your changes and create a pull request."
msgstr ""

#: ../../systemdev/uploading-changes.rst:119
msgid "Give your pull request a descriptive title and description (include links to reference bugs or other material). Ensure that the \"base\" branch is the one you want your changes to be applied to (likely ``xenial``), then click \"Create pull request\"."
msgstr ""

#: ../../systemdev/uploading-changes.rst:121
msgid "With your pull request created, we can move on to testing your changes using the UBports build service!"
msgstr ""

#: ../../systemdev/uploading-changes.rst:124
msgid "Test your changes"
msgstr ""

#: ../../systemdev/uploading-changes.rst:126
msgid "Once your pull request is built (a green check mark appears next to your last commit), you are ready to test your changes on your device."
msgstr ""

#: ../../systemdev/uploading-changes.rst:130
msgid "If a red \"X\" appears next to your last commit, your pull request has failed to build. Click the red \"X\" to view the build log. Until your build errors are resolved, your pull request cannot be installed or accepted."
msgstr ""

#: ../../systemdev/uploading-changes.rst:132
msgid "We'll use ``ubports-qa`` to install your changes. Take note of your pull request's ID (noted as ``#number`` after the title of the pull request) and follow these steps to install your changes:"
msgstr ""

#: ../../systemdev/uploading-changes.rst:134
msgid "Ensure your device is running the newest version of Ubuntu Touch from the ``devel`` channel."
msgstr ""

#: ../../systemdev/uploading-changes.rst:135
msgid "Get shell access to your device using :doc:`/userguide/advanceduse/adb` or :doc:`/userguide/advanceduse/ssh`."
msgstr ""

#: ../../systemdev/uploading-changes.rst:136
msgid "Run ``sudo ubports-qa install REPOSITORY PR``, replacing ``REPOSITORY`` with the name of the repository you have submitted a PR to (``morph-browser`` for example) and PR with the number of your pull request (without the ``#``)."
msgstr ""

#: ../../systemdev/uploading-changes.rst:138
msgid "``ubports-qa`` will automatically add the repository containing your changed software and start the installation for you. All you will need to do is check the packages it asks you to install and say \"yes\" if they are correct."
msgstr ""

#: ../../systemdev/uploading-changes.rst:140
msgid "If ``ubports-qa`` fails to install your packages, run it again with the ``-v`` flag (for example, ``ubports-qa -v install ...``). If it still fails, submit the entire log (starting from the ``$`` before the ``ubports-qa`` command) to `Ubuntu Pastebin <https://paste.ubuntu.com/>`_ and contact us for help."
msgstr ""

#: ../../systemdev/uploading-changes.rst:142
msgid "Once ``ubports-qa`` is finished, test your changes to ensure they have fixed the original bug. Add the ``ubports-qa`` command to your pull request, then send the link to the pull request to other developers and testers so they may also test your changes."
msgstr ""

#: ../../systemdev/uploading-changes.rst:144
msgid "When getting feedback from your testers, be sure to add the information to the pull request (or ask them to do it for you) so that everyone is updated on the status of your code."
msgstr ""

#: ../../systemdev/uploading-changes.rst:146
msgid "Every time you make a change and push it to GitHub, it will trigger a new build. You can run ``sudo ubports-qa update`` to get the freshest changes every time this happens."
msgstr ""

#: ../../systemdev/uploading-changes.rst:149
msgid "Celebrate!"
msgstr ""

#: ../../systemdev/uploading-changes.rst:151
msgid "If you and your testers are satisfied with the results of your pull request, it will be merged. Following the merge, the UBports build service will build your code and deploy it to Ubuntu Touch users worldwide."
msgstr ""

#: ../../systemdev/uploading-changes.rst:153
msgid "Thank you for your contribution to Ubuntu Touch!"
msgstr ""

